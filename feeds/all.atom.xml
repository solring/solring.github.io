<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Solring Lin</title><link href="/" rel="alternate"></link><link href="/feeds/all.atom.xml" rel="self"></link><id>/</id><updated>2018-07-12T21:33:00+08:00</updated><entry><title>使用Pelican架設Blog</title><link href="/building-personal-blog-with-pelican.html" rel="alternate"></link><published>2018-07-12T21:33:00+08:00</published><updated>2018-07-12T21:33:00+08:00</updated><author><name>Solring Lin</name></author><id>tag:None,2018-07-12:/building-personal-blog-with-pelican.html</id><summary type="html">&lt;p&gt;一直以來都是把技術筆記放在Logdown上，但他後來就沒有再繼續維護了，還是移出來好。技術文件嘛，我主要需求是...&lt;/p&gt;</summary><content type="html">&lt;h1&gt;某天我想不開...&lt;/h1&gt;
&lt;p&gt;一直以來都是把技術筆記放在Logdown上，但他後來就沒有再繼續維護了，還是移出來好。
技術文件嘛，我主要需求是:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;貼code要方便+漂亮 (有syntax highlight)&lt;/li&gt;
&lt;li&gt;要可以用Markdown寫!!! (非常堅持) &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;原本是有想要放&lt;a href="https://medium.com/"&gt;Medium&lt;/a&gt;，又潮又漂亮。
然而他不能用markdown.....
老牌的Blogger也不太符合需求......好吧如此Geek的requirement看來還是要自己來滿足了。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(題外話，我架完站的瞬間發現Tumblr可以用markdown + 有支援code block, highlight好像也可以設定...)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Survey了一下，自架技術Blog最受歡迎的方案應該算是&lt;a href="https://jekyllrb.com/"&gt;Jekyll + Github pages&lt;/a&gt;。資源多又穩定，而且聽說很快。但我不知怎麼腦袋壞掉...
應該說，覺得還是用比較熟的Python和有碰過的jinja2 template engine會比較好自己客製化，
就決定採用&lt;a href="https://blog.getpelican.com/"&gt;Pelican&lt;/a&gt;這個Static Site Generator來試著架在&lt;strong&gt;Github pages&lt;/strong&gt;上啦~~~&lt;/p&gt;
&lt;h1&gt;Pelican Blog 架設流程&lt;/h1&gt;
&lt;p&gt;以下會以&lt;a href="http://docs.getpelican.com/en/3.7.1/index.html"&gt;官方文件&lt;/a&gt;和我查到的&lt;a href="https://fedoramagazine.org/make-github-pages-blog-with-pelican/"&gt;這個流程&lt;/a&gt;為主，
並說明一些要注意or調整的地方 (撞過的牆和一堆毛) : /。&lt;/p&gt;
&lt;h2&gt;環境設定&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Windows: Python 3.7/2.7.15 (官方安裝包裝下去就是了，兩個都可用)&lt;/li&gt;
&lt;li&gt;Mac OS: Python 2.7.15&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用&lt;code&gt;virtualenv&lt;/code&gt;建立虛擬環境後安裝官網建議的package:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install markdown pelican typogrify
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;官方Build tool之一的&lt;code&gt;fabric&lt;/code&gt;不需要，原因之後會提到~&lt;/p&gt;
&lt;h2&gt;新建立Pelican Site&lt;/h2&gt;
&lt;p&gt;先照文件產生一個template site:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pelican-quickstart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;就會出現這樣的目錄結構:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yourproject/
├── content
│   └── (pages)
├── output                  # 產生的網站在這
├── develop_server.sh
├── fabfile.py              # fabric build tool用的檔案
├── Makefile
├── pelicanconf.py          # Main settings file
└── publishconf.py          # Settings to use when ready to publish
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;使用make build&lt;/h3&gt;
&lt;p&gt;如果要使用Python2的話要先改一下&lt;code&gt;Makefile&lt;/code&gt;的&lt;code&gt;PY&lt;/code&gt;參數，將python3改成python:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;PY?&lt;span class="o"&gt;=&lt;/span&gt;python
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然後就可以直接build和跑起來了~&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ make html &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; make serve
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;使用fabric&lt;/h3&gt;
&lt;p&gt;在Windows上我有嘗試用fabric來build，但他使用的API是v1太舊，已經無法使用現在直接安裝的fabric。
(請參考&lt;a href="https://unix.stackexchange.com/questions/443643/import-error-fabric-api"&gt;這篇&lt;/a&gt;)
嘗試著安裝fabric v1 package也會遇到以下的問題&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;......&lt;/span&gt;\&lt;span class="n"&gt;pelican&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;env2&lt;/span&gt;\&lt;span class="n"&gt;lib&lt;/span&gt;\&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;packages&lt;/span&gt;\&lt;span class="n"&gt;fabric&lt;/span&gt;\&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;, line 13, in &amp;lt;module&amp;gt;&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;operator&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;isMappingType&lt;/span&gt;
&lt;span class="ne"&gt;ImportError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cannot&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;name&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;isMappingType&amp;#39;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;operator&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;\&lt;span class="n"&gt;users&lt;/span&gt;\&lt;span class="n"&gt;solring&lt;/span&gt;\&lt;span class="n"&gt;projects&lt;/span&gt;\&lt;span class="n"&gt;pelican&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;env2&lt;/span&gt;\&lt;span class="n"&gt;lib&lt;/span&gt;\&lt;span class="n"&gt;operator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;要porting到fabric v2又實在太麻煩XD 於是我就直接用官方build指令，一樣也可以成功產生網站。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pelican content -s publishconf.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;//待續~~~~~&lt;/p&gt;
&lt;h2&gt;寫(搬)文章~&lt;/h2&gt;
&lt;h2&gt;Pelican Themes&lt;/h2&gt;</content><category term="pelican"></category></entry><entry><title>The very first Pelican post</title><link href="/my-first-post.html" rel="alternate"></link><published>2018-07-09T23:45:00+08:00</published><updated>2018-07-09T23:45:00+08:00</updated><author><name>Solring Lin</name></author><id>tag:None,2018-07-09:/my-first-post.html</id><summary type="html">&lt;p&gt;the very fist try&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Hello World!!&lt;/h1&gt;
&lt;p&gt;百廢待興。&lt;/p&gt;
&lt;p&gt;看來離搬舊文章過來還有一段時間。(倒)&lt;/p&gt;
&lt;h3&gt;TODO:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;寫scipt修改logdown export的文章metadata&lt;/li&gt;
&lt;li&gt;研究自動gen文章template的方法&lt;/li&gt;
&lt;/ul&gt;</content><category term="pelican"></category></entry><entry><title>Magenta Job/Process/Thread Study</title><link href="/magenta-jobprocessthread-study.html" rel="alternate"></link><published>2017-07-10T05:59:00+08:00</published><updated>2017-07-10T05:59:00+08:00</updated><author><name>Solring Lin</name></author><id>tag:None,2017-07-10:/magenta-jobprocessthread-study.html</id><summary type="html">&lt;p&gt;(archive) Magenta Job/Process/Thread Study&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Magenta Job/Process/Thread Study&lt;/h1&gt;
&lt;h1&gt;Thread&lt;/h1&gt;
&lt;p&gt;syscall: kernel/lib/syscalls/syscalls_task.cpp
sys_thread_create
--&amp;gt;  process-&amp;gt;CreateUserThread
----&amp;gt; ut-&amp;gt;Initialize(name.data(), name.length());&lt;/p&gt;
&lt;p&gt;source: kernel/lib/magenta/user_thread.cpp&lt;/p&gt;
&lt;h2&gt;Init. flow&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;allocate_stack&lt;/li&gt;
&lt;li&gt;new a LK thread
    assign &lt;em&gt;user_thread&lt;/em&gt; to itself
    register thread state change callback&lt;/li&gt;
&lt;li&gt;attach process address space
    &lt;em&gt;vmm_aspace&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Thread Stucture&lt;/h2&gt;
&lt;p&gt;header: include/kernel/thread.h
最新LK的thread: https://github.com/littlekernel/lk/blob/master/include/kernel/thread.h
^ 已經有VMM, SMP相關的欄位&lt;/p&gt;
&lt;p&gt;AOSP Trusty裡面LK的thread: https://android.googlesource.com/trusty/lk/common/+/master/include/kernel/thread.h
^ 比較舊&lt;/p&gt;
&lt;h2&gt;New attributes in Magenta&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;user thread related&lt;/li&gt;
&lt;li&gt;signal&lt;/li&gt;
&lt;li&gt;priority boost&lt;/li&gt;
&lt;li&gt;interruptable&lt;/li&gt;
&lt;li&gt;profiling &amp;amp; debug related&lt;/li&gt;
&lt;li&gt;default一定有vmm_aspace&lt;/li&gt;
&lt;li&gt;default一定有SMP&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Thread context switch&lt;/h2&gt;
&lt;p&gt;source: kernel/kernel/thread.c&lt;/p&gt;
&lt;p&gt;void thread_resched(void)&lt;/p&gt;
&lt;p&gt;---&amp;gt; void vmm_context_switch(vmm_aspace_t&lt;em&gt; oldspace, vmm_aspace_t&lt;/em&gt; newaspace)  kernel/kernel/vm/vmm.c&lt;/p&gt;
&lt;p&gt;-----&amp;gt; arch_mmu_context_switch (Platform dependent here) // change VM space&lt;/p&gt;
&lt;h1&gt;Process&lt;/h1&gt;
&lt;p&gt;source: kernel/lib/magenta/process_dispatcher.cpp&lt;/p&gt;
&lt;h1&gt;System Call kernel entries&lt;/h1&gt;
&lt;p&gt;source location: kernel/lib/syscalls/&lt;/p&gt;
&lt;p&gt;接到各個kernel space object dispatcher&lt;/p&gt;</content></entry><entry><title>Google Magenta Micro-kernel Survey</title><link href="/google-magenta-micro-kernel-survey.html" rel="alternate"></link><published>2017-06-17T12:26:00+08:00</published><updated>2017-06-17T12:26:00+08:00</updated><author><name>Solring Lin</name></author><id>tag:None,2017-06-17:/google-magenta-micro-kernel-survey.html</id><summary type="html">&lt;p&gt;(archive) Google Magenta Micro-kernel Survey&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Google設計了一個跨平台的OS &lt;a href="https://zh.wikipedia.org/wiki/Google_Fuchsia"&gt;Fuchsia&lt;/a&gt; (wiki)
他的主要的基礎micro-kernel OS就是&lt;a href="https://fuchsia.googlesource.com/magenta/"&gt;Magenta&lt;/a&gt; (codebase &amp;amp; doc)
裡面加了很多Security相關的設計&lt;/p&gt;
&lt;p&gt;先放重點:
- Based on Little Kernel
- With user/kernel space
- Object-based resource management, syscall --&amp;gt; for security&lt;/p&gt;
&lt;h1&gt;Security Design&lt;/h1&gt;
&lt;p&gt;Magenta裡面多加了很多設計以補足LK的安全問題
主要是資源(e.g. memory)的權限管理等
refs: https://fuchsia.googlesource.com/magenta/+/HEAD/docs/concepts.md&lt;/p&gt;
&lt;h2&gt;Handle &amp;amp; Right&lt;/h2&gt;
&lt;p&gt;增加Security最主要的設計。
基本概念就是，user-space要去access任何kernel的資源
都不是直接取得某個資源的位置之類的，而是要透過handle
並且在執行某些system call時，檢查這些handle上所帶的權限等資訊
避免user-space去做危險動作(?)&lt;/p&gt;
&lt;p&gt;每個Handle上都有&lt;a href="https://fuchsia.googlesource.com/magenta/+/HEAD/docs/rights.md"&gt;Right&lt;/a&gt;
訂定可以用該handle做哪些動作
MX_RIGHT_DUPLICATE  Allows handle duplication via mx_handle_duplicate
MX_RIGHT_TRANSFER   Allows handle transfer via mx_channel_write
MX_RIGHT_READ   Allows inspection of object state
Allows reading of data from containers (channels, sockets, VM objects, etc)
MX_RIGHT_WRITE  Allows modification of object state
Allows writing of data to containers (channels, sockets, VM objects, etc)
MX_RIGHT_EXECUTE  &lt;br&gt;
MX_RIGHT_DEBUG  Placeholder for debugger use, pending audit of all rights usage&lt;/p&gt;
&lt;p&gt;對同個kernel object可以有多個handle，right可以不同
藉此就可以管理不同應用的資源使用:
有些app只能read, 只有特定app可以write等等
避免惡意攻擊或是bug(?&lt;/p&gt;
&lt;h2&gt;System call&lt;/h2&gt;
&lt;p&gt;就像其他OS，Magenta也有system cal來讓user-space使用kernel-space的功能
主要分三種type:
- 創造handle的
- 拿handle做事的
- 可以直接使用的(很少&lt;/p&gt;
&lt;p&gt;當system call被call的時候，會嚴格檢查handle type, handle rights, process是不是真的有這個handle等&lt;/p&gt;
&lt;h2&gt;Process &amp;amp; Thread&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;有支援multi-thread!&lt;/strong&gt;
這很重要因為Trusty, Trustonic之類的TEE OS都沒有啊哈哈
在某些平台(咳咳...)Single thread就會是效能瓶頸&lt;/p&gt;
&lt;p&gt;hierarchy: &lt;a href="https://fuchsia.googlesource.com/magenta/+/HEAD/docs/objects/job.md"&gt;Job&lt;/a&gt; &amp;gt; &lt;a href="https://fuchsia.googlesource.com/magenta/+/HEAD/docs/objects/process.md"&gt;Process&lt;/a&gt; &amp;gt; &lt;a href="https://fuchsia.googlesource.com/magenta/+/HEAD/docs/objects/thread.md"&gt;Thread&lt;/a&gt;
Job: 規定各項resource的權限，&lt;strong&gt;可以有子job&lt;/strong&gt;
Process: 包含在Job內，獨立&lt;strong&gt;Virtual address space, data, handles&lt;/strong&gt;
Thread: 包含在Process內，獨立&lt;strong&gt;Register &amp;amp; stack&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;類似Android，一開始會有一個User-Root Job &lt;em&gt;userboot&lt;/em&gt;作為第一個user-space process，再由他fork出其他process
他有所有其他app的job object，所以可以fork出其他job&lt;/p&gt;
&lt;p&gt;/kernel/lib/magenta/user_thread.cpp&lt;/p&gt;
&lt;h2&gt;Inter-Process Communication &amp;amp;&lt;/h2&gt;
&lt;h3&gt;Sockets&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Streamming，以bytes為單位&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Channel&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Datagram(msg based) 一次固定size read/write。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可以傳handle&lt;/strong&gt;，還會自動reference/dereference&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Synchronization&lt;/h2&gt;
&lt;p&gt;Hmmm 這邊官方文件有點抽像，不過大致上應該要歸類為這兩種方法:&lt;/p&gt;
&lt;h3&gt;Signal&lt;/h3&gt;
&lt;p&gt;Thread可以blocking wait某些Object上的Signal
目前最多有32個signal(因為是32-bits)，大部分是系統保留使用的，有些可以user自訂
https://fuchsia.googlesource.com/magenta/+/HEAD/docs/generic_signals.md&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Event&lt;/strong&gt;是最基本可以被wait的object&lt;/p&gt;
&lt;p&gt;有些object有成對的handle (e.g. channel, socket, fifo, or eventpair
當另一個handle被signal(&lt;a href="https://fuchsia.googlesource.com/magenta/+/HEAD/docs/syscalls/object_signal.md"&gt;object_signal_peer&lt;/a&gt;的時候，另一端就會被通知&lt;/p&gt;
&lt;h3&gt;Port&lt;/h3&gt;
&lt;p&gt;可以一口氣等多個event
並且可以傳送資料payload(Packet)
一邊create port(port_create)之後，可以傳給另一邊
之後就類似event，一邊可以wait(port_wait)，另一邊則是enqueue(port_enqueue) packet
NOTE: APIs are still changing frequently.&lt;/p&gt;
&lt;h2&gt;Address Space Management &amp;amp; Shared Memory&lt;/h2&gt;
&lt;p&gt;每個Process會有一個&lt;strong&gt;Virtual Memory Address Regions (VMARs)&lt;/strong&gt; Object
可以用它來alloc和free某個大小的memory(類似heap)
也可以用來map/unmap別的process傳過來的&lt;strong&gt;Virtual Memory Object(VMO)&lt;/strong&gt; handle
Virtual Memory Objects represent a set of physical pages of memory.
除了map/unmap以外，也可以直接用API對VMO讀寫
利用VMO可以實現Shared Memory的機制&lt;/p&gt;
&lt;h1&gt;和LK的比較&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Magenta has first class user-mode support. LK does not.&lt;/li&gt;
&lt;li&gt;Magenta is an object-handle system. LK does not have either concept.&lt;/li&gt;
&lt;li&gt;Magenta has a capability-based security model. In LK all code is trusted.&lt;/li&gt;
&lt;/ul&gt;</content></entry><entry><title>[NOTE] ARM Secure Monitor Call</title><link href="/note-arm-secure-monitor-call.html" rel="alternate"></link><published>2017-06-14T12:26:00+08:00</published><updated>2017-06-14T12:26:00+08:00</updated><author><name>Solring Lin</name></author><id>tag:None,2017-06-14:/note-arm-secure-monitor-call.html</id><summary type="html">&lt;p&gt;(archive) [NOTE] ARM Secure Monitor Call&lt;/p&gt;</summary><content type="html">&lt;p&gt;https://read01.com/AEDBeJ.html&lt;/p&gt;
&lt;p&gt;https://mycpp.hackpad.com/ep/pad/static/nSiBMBB9RNN&lt;/p&gt;
&lt;p&gt;有關手機安全　相當詳細的報導
https://read01.com/4k0azR.html&lt;/p&gt;</content></entry><entry><title>[Trusty OS] 加system call</title><link href="/trusty-os-jia-system-call.html" rel="alternate"></link><published>2017-02-15T07:32:00+08:00</published><updated>2017-02-15T07:32:00+08:00</updated><author><name>Solring Lin</name></author><id>tag:None,2017-02-15:/trusty-os-jia-system-call.html</id><summary type="html">&lt;p&gt;(archive) [Trusty OS] 加system call&lt;/p&gt;</summary><content type="html">&lt;p&gt;Tool: lk/trusty/lib/syscall/stubgen/stubgen.py&lt;/p&gt;
&lt;h2&gt;Implement system call&lt;/h2&gt;
&lt;p&gt;在&lt;code&gt;lk/trusty/lib/trusty/syscall.c&lt;/code&gt;裡面加system call的entry
NOTE: function開頭一定要是&lt;code&gt;sys_&lt;/code&gt;，例如&lt;code&gt;sys_write&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;Add entry in system call table header file&lt;/h2&gt;
&lt;p&gt;在&lt;code&gt;lk/trusty/lib/trusty/include/syscall_table.h&lt;/code&gt;
用&lt;code&gt;DEF_SYSCALL&lt;/code&gt;加上剛剛implement的syscall name但是去掉&lt;code&gt;sys_&lt;/code&gt;
例如，如果加的是&lt;code&gt;sys_panic&lt;/code&gt;的話，就要加上&lt;code&gt;panic&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;DEF_SYSCALL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0x8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;panic&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;至於syscall不同的參數要怎麼寫
可以參考 lk/trusty/lib/syscall/README&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE: 這邊的header不是拿來編譯用的，只是用來gen真正的header file&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;Generate syscall stub file &amp;amp; syscall header file&lt;/h2&gt;
&lt;p&gt;生成實際使用的header file和vector table
這邊可能要看你的平台實際上是使用哪裡的&lt;code&gt;trusty_syscall.S&lt;/code&gt;和&lt;code&gt;trusty_syscall.h&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python lk/trusty/lib/syscall/stubgen/stubgen.py -s lib/lib/libc-trusty/arch/arm/trusty_syscall.S -d lib/include/trusty_syscalls.h lk/trusty/lib/trusty/include/syscall_table.h
&lt;/pre&gt;&lt;/div&gt;</content></entry><entry><title>神奇的線稿自動上色PaintsChainer - 架設</title><link href="/shen-qi-de-xian-gao-zi-dong-shang-se-paintschainer-jia-she.html" rel="alternate"></link><published>2017-01-30T02:13:00+08:00</published><updated>2017-01-30T02:13:00+08:00</updated><author><name>Solring Lin</name></author><id>tag:None,2017-01-30:/shen-qi-de-xian-gao-zi-dong-shang-se-paintschainer-jia-she.html</id><summary type="html">&lt;p&gt;(archive) 神奇的線稿自動上色PaintsChainer - 架設&lt;/p&gt;</summary><content type="html">&lt;p&gt;過年發現這個神奇的Project!
https://github.com/taizan/PaintsChainer
因為太神了+官方server爆流量(?) 就想要自己架來玩玩
紀錄一下艱辛的過程...&lt;/p&gt;
&lt;h1&gt;環境&lt;/h1&gt;
&lt;p&gt;Windows 10
Nvidia GeForce GTX960m&lt;/p&gt;
&lt;h1&gt;Set up Windows&lt;/h1&gt;
&lt;p&gt;因為有用到CUDA，如果使用的電腦沒有C開發環境，就需要整個重新架設&lt;/p&gt;
&lt;h2&gt;下載並安裝Visual C++&lt;/h2&gt;
&lt;p&gt;不想裝IDE的話，使用&lt;a href="http://landinghub.visualstudio.com/visual-cpp-build-tools"&gt;Windows Visual C++ 2015 Build tools&lt;/a&gt;就夠了&lt;/p&gt;
&lt;h3&gt;NOTE:&lt;/h3&gt;
&lt;p&gt;後來我有遇到Runtime時找不到&lt;code&gt;cl.exe&lt;/code&gt;之類的問題
好像把VC的bin 加進PATH之後就解決了
C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\bin&lt;/p&gt;
&lt;h2&gt;安裝Windows Kits&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;!!!!!!!很重要!!!!!!!!!&lt;/strong&gt;
需要安裝Windows Kits 並將他的include和lib加進環境變數
&lt;a href="https://developer.microsoft.com/zh-tw/windows/downloads/windows-10-sdk"&gt;Windows 10載點&lt;/a&gt;
否則會在Runtime時遇到以下error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;......
Files (x86)/Microsoft Visual Studio 14.0/VC/bin/../../VC/INCLUDE\\crtdefs.h&amp;quot;\r\nC:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/bin/../../VC/INCLUDE\crtdefs.h(10): fatal error C1083: Cannot open include file: &amp;#39;corecrt.h&amp;#39;: No such file or directory\r\n
......
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;安裝完畢後，需要另外新增INCLUDE &amp;amp; LIB兩個環境變數
(這是爛招XD 但是目前這樣最快~~~)
&lt;img alt="PATH.png" src="http://user-image.logdown.io/user/13673/blog/12890/post/1365466/koQL7A91Qji5LCKs3UOo_PATH.png"&gt;
CUDA討論區有&lt;a href="https://devtalk.nvidia.com/default/topic/969047/cuda-8-vs2015-corecrt-h-error/?offset=7"&gt;相關post&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Setup CUDA &amp;amp; cuDNN&lt;/h1&gt;
&lt;p&gt;我是使用&lt;strong&gt;CUDA 8.0.44&lt;/strong&gt; &amp;amp; &lt;strong&gt;CUDNN 8.0&lt;/strong&gt; for win10
其中下載完cudnn之後
要把裡面的&lt;strong&gt;include,bin,lib&lt;/strong&gt;裡的檔案都copy到CUDA底下相對應的資料夾&lt;/p&gt;
&lt;h1&gt;Setup Python Chainer &amp;amp; Other packages&lt;/h1&gt;
&lt;h2&gt;小技巧: 在Windows下同時使用Python 2 &amp;amp; 3&lt;/h2&gt;
&lt;p&gt;由於原project使用Python 3，因此以下的package都要裝在Python 3裡面
在Window環境中都安裝完python 2和3的話
可以直接在cmd裡面使用&lt;code&gt;py&lt;/code&gt; 這個cmd(在安裝python3時會安裝)指定要使用python 2還是3 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ py -2 xxx.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;同理，要用pip安裝套件到python 3的話:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ py -3 -m pip install xxxx
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這樣就可以指定要安裝套件到哪啦~
(當然還是推薦用virtualenv啦)&lt;/p&gt;
&lt;h2&gt;Chainer&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;!!!!!!!很重要!!!!!!!!!&lt;/strong&gt;
如果在正確安裝完CUDA和CUDNN之前就先安裝chainer的話，就會吃到錯誤的&lt;code&gt;CUDA_PATH&lt;/code&gt;
Runtime的時候會噴error並提醒你重裝
總之一定要照順序安裝啦&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ py -3 -m pip install chainer --no-cache-dir -vvvv
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;PIL&lt;/h2&gt;
&lt;p&gt;(Currently not used in PaintsChain)
其實他的名字叫pillow...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ py -3 -m pip install pillow
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;http://stackoverflow.com/questions/28155028/installing-pil-for-python-3-4&lt;/p&gt;
&lt;h2&gt;Prebuilt cv2 for Python3&lt;/h2&gt;
&lt;p&gt;現在可以直接用pip安裝的只有Python 2的
但是有好心人有prebuilt好Python 3版本，並用wheel package的方式release出來給人下載~
Instruction
http://lsw.gapp.nthu.edu.tw/note/installation-of-opencv3-1-python3-5-with-windows
載點
http://www.lfd.uci.edu/~gohlke/pythonlibs/&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;// download the wheel file first
$ py -3 -m pip install opencv_python-3.2.0-cp36-cp36m-win_amd64.whl
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Numpy and other packages&lt;/h2&gt;
&lt;p&gt;直接用pip安裝就OK啦~&lt;/p&gt;
&lt;p&gt;&lt;img alt="demo" src="https://68.media.tumblr.com/93ac7fbc3292a788ea175dee27b67d9c/tumblr_oklgg16N5c1vxv7jho2_r1_1280.png"&gt;
差不多這樣就可以跑啦
Github上也有更新越來越多安裝資訊了
目前也有一堆人跳下去了，有問題應該都可以在上面發問＆找答案&lt;/p&gt;
&lt;p&gt;code study還是留到下一篇.....&lt;/p&gt;</content></entry><entry><title>D3.js notes realtime chart</title><link href="/d3js-notes-realtime-chart.html" rel="alternate"></link><published>2016-09-30T07:24:00+08:00</published><updated>2016-09-30T07:24:00+08:00</updated><author><name>Solring Lin</name></author><id>tag:None,2016-09-30:/d3js-notes-realtime-chart.html</id><summary type="html">&lt;p&gt;(archive) D3.js notes realtime chart&lt;/p&gt;</summary><content type="html">&lt;p&gt;http://bl.ocks.org/simenbrekken/6634070
https://bl.ocks.org/boeric/6a83de20f780b42fadb9&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;!&lt;/span&gt;&lt;span class="nx"&gt;doctype&lt;/span&gt; &lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt; &lt;span class="nx"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;meta&lt;/span&gt; &lt;span class="nx"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;!--&lt;/span&gt; &lt;span class="nx"&gt;Author&lt;/span&gt;: &lt;span class="kt"&gt;Bo&lt;/span&gt; &lt;span class="nx"&gt;Ericsson&lt;/span&gt; &lt;span class="o"&gt;--&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Real&lt;/span&gt; &lt;span class="nx"&gt;Time&lt;/span&gt; &lt;span class="nx"&gt;Chart&lt;/span&gt; &lt;span class="nx"&gt;Multi&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;link&lt;/span&gt; &lt;span class="nx"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;stylesheet&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;css&lt;/span&gt; &lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/2.3.2/css/bootstrap.min.css&amp;quot;&lt;/span&gt; &lt;span class="nx"&gt;media&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;all&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;!--&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;link&lt;/span&gt; &lt;span class="nx"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;stylesheet&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;css&lt;/span&gt; &lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;../_lib/bootstrap.min.css&amp;quot;&lt;/span&gt; &lt;span class="nx"&gt;media&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;all&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;--&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;axis&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;font&lt;/span&gt;: &lt;span class="kt"&gt;10px&lt;/span&gt; &lt;span class="nx"&gt;sans&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;chartTitle&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;font&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt;: &lt;span class="kt"&gt;18px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;font&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;weight&lt;/span&gt;: &lt;span class="kt"&gt;bold&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;anchor&lt;/span&gt;: &lt;span class="kt"&gt;middle&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;axis&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;font&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt;: &lt;span class="kt"&gt;18px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;font&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;weight&lt;/span&gt;: &lt;span class="kt"&gt;bold&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;anchor&lt;/span&gt;: &lt;span class="kt"&gt;middle&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;axis&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;axis&lt;/span&gt; &lt;span class="nx"&gt;line&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;fill&lt;/span&gt;: &lt;span class="kt"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;stroke&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;shape&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;rendering&lt;/span&gt;: &lt;span class="kt"&gt;crispEdges&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;axis&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;fill&lt;/span&gt;: &lt;span class="kt"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;stroke&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;shape&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;rendering&lt;/span&gt;: &lt;span class="kt"&gt;crispEdges&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nav&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;area&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;fill&lt;/span&gt;: &lt;span class="kt"&gt;lightgrey&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;stroke&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;: &lt;span class="kt"&gt;0px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nav&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;fill&lt;/span&gt;: &lt;span class="kt"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;stroke&lt;/span&gt;: &lt;span class="kt"&gt;darkgrey&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;stroke&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;: &lt;span class="kt"&gt;1px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;viewport&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;stroke&lt;/span&gt;: &lt;span class="kt"&gt;grey&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;fill&lt;/span&gt;: &lt;span class="kt"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;fill&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;opacity&lt;/span&gt;: &lt;span class="kt"&gt;0.3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;viewport&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;extent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;fill&lt;/span&gt;: &lt;span class="kt"&gt;orange&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;well&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;padding&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;top&lt;/span&gt;: &lt;span class="kt"&gt;0px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;padding&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;bottom&lt;/span&gt;: &lt;span class="kt"&gt;0px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/style&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;max-width: 900px; max-height: 400px; padding: 10px&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kr"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;well&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h4&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Energy&lt;/span&gt; &lt;span class="nx"&gt;Aware&lt;/span&gt; &lt;span class="nx"&gt;Scheduler&lt;/span&gt; &lt;span class="nx"&gt;Performance&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;Power&lt;/span&gt; &lt;span class="nx"&gt;Consumption&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;debug&amp;quot;&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;checkbox&amp;quot;&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;debug&amp;quot;&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;debug&amp;quot;&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;margin-bottom: 10px&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Debug&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;halt&amp;quot;&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;checkbox&amp;quot;&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;halt&amp;quot;&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;halt&amp;quot;&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;margin-bottom: 10px&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Halt&lt;/span&gt;

  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;viewDiv1&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;viewDiv2&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/div&amp;gt;&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/div&amp;gt;&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.6/d3.min.js&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/script&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!--&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;../_lib/d3.min.js&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/script&amp;gt;--&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;realTimeChartMulti.js&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/script&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;use strict&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;cat1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;with EAS&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;cat2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;with EAS&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;lagacy&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="c1"&gt;// create the real time chart&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;chart1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;realTimeChartMulti&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Performance&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;yTitle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;FPS&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;xTitle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Time&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;yDomain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cat1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// initial y domain (note array)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;border&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;900&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;350&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;chart2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;realTimeChartMulti&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Power Consumption&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;yTitle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Current(mA)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;xTitle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Time&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;yDomain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cat2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// initial y domain (note array)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;border&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;900&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;350&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// invoke the chart&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;chartDiv1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;d3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#viewDiv1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;div&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;chartDiv1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;chart1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// invoke the chart&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;chartDiv2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;d3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#viewDiv2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;div&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;chartDiv2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;chart2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// alternative and equivalent invocation&lt;/span&gt;
&lt;span class="c1"&gt;//chart(chartDiv); &lt;/span&gt;

&lt;span class="c1"&gt;// event handler for debug checkbox&lt;/span&gt;
&lt;span class="nx"&gt;d3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#debug&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;change&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;d3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;checked&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;chart1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;chart2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;// event handler for halt checkbox&lt;/span&gt;
&lt;span class="nx"&gt;d3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#halt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;change&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;d3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;checked&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;chart1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;halt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;chart2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;halt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;


&lt;span class="c1"&gt;// configure the data generator&lt;/span&gt;

&lt;span class="c1"&gt;// mean and deviation for generation of time intervals&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;tX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// time constant, multiple of one second&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;meanMs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;tX&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// milliseconds&lt;/span&gt;
    &lt;span class="nx"&gt;dev&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;tX&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// std dev&lt;/span&gt;

&lt;span class="c1"&gt;// define time scale&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;timeScale&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;d3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;linear&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;domain&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;300&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;tX&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1700&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;tX&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;range&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;300&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;tX&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1700&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;tX&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clamp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// define function that returns normally distributed random numbers&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;normal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;d3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;normal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;meanMs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dev&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// define color scale&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;d3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;category10&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// in a normal use case, real time data would arrive through the network or some other mechanism&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;shapes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;rect&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;circle&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;timeout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// define data generator&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;dataGenerator() {&lt;/span&gt;

  &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="c1"&gt;// output a sample for each category, each interval (five seconds)&lt;/span&gt;
    &lt;span class="nx"&gt;chart1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;yDomain&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

      &lt;span class="c1"&gt;// create randomized timestamp for this category data item&lt;/span&gt;
      &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;getTime&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="c1"&gt;// create new data item&lt;/span&gt;
      &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// complex data item; four attributes (type, color, opacity and size) are changing dynamically with each iteration (as an example)&lt;/span&gt;
        &lt;span class="nx"&gt;time&lt;/span&gt;: &lt;span class="kt"&gt;now&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;color&lt;/span&gt;: &lt;span class="kt"&gt;color&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="nx"&gt;opacity&lt;/span&gt;: &lt;span class="kt"&gt;Math.max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="mf"&gt;0.3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="nx"&gt;category&lt;/span&gt;: &lt;span class="kt"&gt;cat1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="c1"&gt;//type: shapes[Math.round(Math.random() * (shapes.length - 1))], // the module currently doesn&amp;#39;t support dynamically changed svg types (need to add key function to data, or method to dynamically replace svg object – tbd)&lt;/span&gt;
        &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;circle&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;size&lt;/span&gt;: &lt;span class="kt"&gt;Math.max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;

      &lt;span class="c1"&gt;// send the datum to the chart&lt;/span&gt;
      &lt;span class="nx"&gt;chart1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;datum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;      
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="c1"&gt;// output a sample for each category, each interval (five seconds)&lt;/span&gt;
    &lt;span class="nx"&gt;chart2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;yDomain&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

      &lt;span class="c1"&gt;// create randomized timestamp for this category data item&lt;/span&gt;
      &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;getTime&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="c1"&gt;// create new data item&lt;/span&gt;
      &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// complex data item; four attributes (type, color, opacity and size) are changing dynamically with each iteration (as an example)&lt;/span&gt;
        &lt;span class="nx"&gt;time&lt;/span&gt;: &lt;span class="kt"&gt;now&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;color&lt;/span&gt;: &lt;span class="kt"&gt;color&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="nx"&gt;opacity&lt;/span&gt;: &lt;span class="kt"&gt;Math.max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="mf"&gt;0.3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="nx"&gt;category&lt;/span&gt;: &lt;span class="kt"&gt;cat2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="c1"&gt;//type: shapes[Math.round(Math.random() * (shapes.length - 1))], // the module currently doesn&amp;#39;t support dynamically changed svg types (need to add key function to data, or method to dynamically replace svg object – tbd)&lt;/span&gt;
        &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;circle&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;size&lt;/span&gt;: &lt;span class="kt"&gt;Math.max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;

      &lt;span class="c1"&gt;// send the datum to the chart&lt;/span&gt;
      &lt;span class="nx"&gt;chart2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;datum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;      
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="c1"&gt;// drive data into the chart at average interval of five seconds&lt;/span&gt;
    &lt;span class="c1"&gt;// here, set the timeout to roughly five seconds&lt;/span&gt;
    &lt;span class="nx"&gt;timeout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;timeScale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;normal&lt;/span&gt;&lt;span class="p"&gt;()));&lt;/span&gt;

    &lt;span class="c1"&gt;// do forever&lt;/span&gt;
    &lt;span class="nx"&gt;dataGenerator&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;timeout&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// start the data generator&lt;/span&gt;
&lt;span class="nx"&gt;dataGenerator&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content></entry><entry><title>[GIT] patch只apply部份檔案</title><link href="/git-patchzhi-applybu-fen-dang-an.html" rel="alternate"></link><published>2016-09-20T07:21:00+08:00</published><updated>2016-09-20T07:21:00+08:00</updated><author><name>Solring Lin</name></author><id>tag:None,2016-09-20:/git-patchzhi-applybu-fen-dang-an.html</id><summary type="html">&lt;p&gt;(archive) [GIT] patch只apply部份檔案&lt;/p&gt;</summary><content type="html">&lt;p&gt;因為commit沒有切乾淨or實在是太多commit很難pick
想把某個branch上開發的功能做成patch抽出來apply到另一個codebase的時候
就會因為有些檔案不存在而apply fail
或是產生很難resolve的conflict&lt;/p&gt;
&lt;p&gt;遇到這個情況可以先用&lt;code&gt;--check&lt;/code&gt;看哪些檔案會產生error&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git apply --check your.patch
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然後再從error看出哪些檔案不存在，直接用&lt;code&gt;--exclude&lt;/code&gt;繞開
其他的conflict再用3-way merge的方法resolve&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git apply -3 --exclude=paths/to/exclude/* your.patch
&lt;/pre&gt;&lt;/div&gt;</content></entry><entry><title>[Android] [PokemonGO] 我也來inverse engineering一下</title><link href="/android-pokemongo-wo-ye-lai-inverse-engineeringyi-xia.html" rel="alternate"></link><published>2016-08-25T02:22:00+08:00</published><updated>2016-08-25T02:22:00+08:00</updated><author><name>Solring Lin</name></author><id>tag:None,2016-08-25:/android-pokemongo-wo-ye-lai-inverse-engineeringyi-xia.html</id><summary type="html">&lt;p&gt;(archive) [Android] [PokemonGO] 我也來inverse engineering一下&lt;/p&gt;</summary><content type="html">&lt;p&gt;其實大部分的分析就靠這篇&lt;a href="http://www.inside.com.tw/2016/08/24/source-code-of-pokemon-go"&gt;神文&lt;/a&gt;就可以了XD
但其中對於Sensor/Location資訊是如何利用的著墨較少，所以只好自己來一下
亂猜的部分很多，還請不吝指教&amp;lt;(&lt;em&gt;    &lt;/em&gt;)&amp;gt;&lt;/p&gt;
&lt;h1&gt;Use dex2jar &amp;amp; JD-GUI to decompile .dex files&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;(Update: 原文有附整理過的&lt;a href="https://github.com/applidium/PokemonGo_Android_RE"&gt;source code&lt;/a&gt;了--雖然是剛出的時候的版本，不想自己做的可以跳過這段:P)&lt;/em&gt;
因為我的目標不是創一個可build的專案，只要看懂裡面在幹麻就好
所以就使用原文第一階段的方法，先用dex2jar把.dex轉成.jar file，然後用JD-GUI去讀&lt;/p&gt;
&lt;h2&gt;Compile dex2jar&lt;/h2&gt;
&lt;p&gt;RRRR　因為現在找不到prebuilt版的，只好從&lt;a href="https://github.com/pxb1988/dex2jar"&gt;source&lt;/a&gt;開始
目前已經是用gradle build，還有gradle wrapper
所以只要解壓縮，點兩下&lt;code&gt;gradlew.bat&lt;/code&gt;就可以惹
會在src外面產生&lt;code&gt;dex-tools-2.1-SNAPSHOT.zip&lt;/code&gt;這個壓縮檔，裡面就是dex2jar全部的工具了
(如果沒有在外面找到，也可以在dex-tools/build/distributions/找到)&lt;/p&gt;
&lt;h3&gt;Refs:&lt;/h3&gt;
&lt;p&gt;https://sourceforge.net/p/dex2jar/wiki/BuildFromSource/&lt;/p&gt;
&lt;h2&gt;Pull out Pokemon GO apk&lt;/h2&gt;
&lt;p&gt;找一支有root過的手機，從play上下載最新的程式 (本文使用2016/8/25的版本)
再用adb pull下來
(adb安裝方法可參考&lt;a href="http://wangwangtc.blogspot.tw/2015/03/adbandroid.html"&gt;這篇&lt;/a&gt;)
通常production buildl的load都不能直接pull &lt;code&gt;/data/app&lt;/code&gt;底下的東西
所以我都會先copy到sdcard裡&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cp -r /data/app/com.nianticlabs.pokemongo-2 /sdcard/pkgo
//結尾不一定是2 看你更新了幾次 : P
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;adb pull /sdcard/pkgo
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;拉下來之後，可以看到這裡面有一個&lt;code&gt;base.apk&lt;/code&gt;
和其他prebuilt的native lib
(都只有arm的，x86的phone繼續哭哭XD)
&lt;img alt="pkgo-lib.png" src="http://user-image.logdown.io/user/13673/blog/12890/post/804838/PvB7A5aRjq17IzZmVHfD_pkgo-lib.png"&gt;&lt;/p&gt;
&lt;p&gt;因為我們只需要看Android Location/Sensor API的部分
所以就只要把&lt;code&gt;base.apk&lt;/code&gt;用7zip之類的解壓縮之後
拿裡面的&lt;code&gt;classes.dex&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;Turn .dex to .jar file&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;dex-tools-2.1-SNAPSHOT.zip&lt;/code&gt;解壓縮之後
用裡面的&lt;code&gt;d2j-dex2jar.bat&lt;/code&gt;把base.apk轉成.classes檔&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;\&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; dex-tools-2.1-SNAPSHOT\d2j-dex2jar.bat classes.dex
dex2jar classes.dex -&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; .\classes-dex2jar.jar
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Download JD-GUI&lt;/h2&gt;
&lt;p&gt;官網有各種平台的prebuilt程式，直接下載來用就對了~
http://jd.benow.ca/
打開剛剛gen出來的.jar檔就可以看到裡面的class啦~
&lt;img alt="pkgo-classes.png" src="http://user-image.logdown.io/user/13673/blog/12890/post/804838/Oc050z0JQKTajC5Ub9jQ_pkgo-classes.png"&gt;&lt;/p&gt;
&lt;h1&gt;Location/Sensor related analysis&lt;/h1&gt;
&lt;p&gt;核心功能部分幾乎都放在com.nianticlabs.nia這個package底下&lt;/p&gt;
&lt;p&gt;幾個簡單的conclusion:
- 好險還是沒有用Proguard XD
- 使用了Android的三種location來源: GPS, Network, Google的Fused location
- Location update的min period都滿短的: GPS 1 sec, Network 5 sec (很噴電不意外 : /
- 直接call Sensor API的部分主要是拿來偵測手機旋轉or取得玩家面向的方位
- 有使用到Google的ActivityRecognition&lt;/p&gt;
&lt;h2&gt;Location part&lt;/h2&gt;
&lt;h4&gt;package: com.nianticlabs.nia.location&lt;/h4&gt;
&lt;p&gt;在&lt;code&gt;NianticLocationManager.java&lt;/code&gt;裡面可以看到有三個Location provider
``` java NianticLocationManager.java
addProvider("fused", new FusedLocationProvider(this.context, this.gpsUpdateTimeMs, this.gpsUpdateDistanceM));
addProvider("gps", new LocationManagerProvider(this.context, "gps", this.gpsUpdateTimeMs, this.gpsUpdateDistanceM));
addProvider("network", new LocationManagerProvider(this.context, "network", this.netUpdateTimeMs, this.netUpdateDistanceM));&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;其中`LocationManagerProvider.java`就是個wrapper
三個provider裡面分別用Android `LocationManager`這個system service去拿GPS和Network location
和使用Google Mobile Service(GMS)的Fused location
&amp;quot;gps&amp;quot; 這個應該是`LocationManager.GPS_PROVIDER`, &amp;quot;network&amp;quot; 是`LocationManager.NETWORK_PROVIDER`
``` java LocationMangerProvider.java
this.locationManager = ((LocationManager)this.context.getSystemService(&amp;quot;location&amp;quot;));
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;實際拿location的方法是呼叫&lt;a href="https://developer.android.com/reference/android/location/LocationManager.html#requestLocationUpdates(java.lang.String,%20long,%20float,%20android.location.LocationListener)"&gt;requestLocationUpdates(String, long, float, LocationListener)&lt;/a&gt;註冊更新location時的listener
其中&lt;em&gt;最小更新時間&amp;amp;距離&lt;/em&gt;的參數就是上面constructor帶入的
``` java NianticLocationManager.java
  private float gpsUpdateDistanceM = 0.0F;
  private int gpsUpdateTimeMs = 1000;
  private float netUpdateDistanceM = 0.0F;
  private int netUpdateTimeMs = 5000;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;更新時的listener則是統一使用`NianticLocationManager.java`裡建立的listener
這個listener最後會call到native lib，未看先猜應該是接到unity遊戲引擎

## Sensor
主要都在`NianticSensorManager.java`
接了一堆sensor service，但感覺最終目標都是要偵測手機旋轉和方位
最後接回native lib給遊戲引擎使用，未看先猜用來進省電模式和update地圖畫面使用
尤其是角色在地圖上的方向旋轉部分
``` java
  public NianticSensorManager(Context paramContext, long paramLong)
  {
    super(paramContext, paramLong);
    this.display = ((WindowManager)paramContext.getSystemService(&amp;quot;window&amp;quot;)).getDefaultDisplay();
    this.sensorManager = ((SensorManager)paramContext.getSystemService(&amp;quot;sensor&amp;quot;));
    this.gravity = this.sensorManager.getDefaultSensor(9);
    this.gyroscope = this.sensorManager.getDefaultSensor(4);
    this.accelerometer = this.sensorManager.getDefaultSensor(1);
    this.magnetic = this.sensorManager.getDefaultSensor(2);
    this.rotation = this.sensorManager.getDefaultSensor(11);
    this.linearAcceleration = this.sensorManager.getDefaultSensor(10);
  }
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Activity Recognition&lt;/h2&gt;
&lt;p&gt;最後，他居然有用Google 的&lt;a href="https://developers.google.com/android/reference/com/google/android/gms/location/ActivityRecognitionApi"&gt;Acitivity Recognition API&lt;/a&gt;!
看起來一樣也是接到Activity之後直接call native function。&lt;/p&gt;
&lt;p&gt;瞄一下&lt;a href="https://developers.google.com/android/reference/com/google/android/gms/location/DetectedActivity"&gt;目前Google AR可以detect到的activity&lt;/a&gt;
可以偵測到的Activity有以下幾項:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;int     IN_VEHICLE  The device is in a vehicle, such as a car.
int     ON_BICYCLE  The device is on a bicycle.
int     ON_FOOT     The device is on a user who is walking or running.
int     RUNNING     The device is on a user who is running.
int     STILL   The device is still (not moving).
int     TILTING     The device angle relative to gravity changed significantly.
int     UNKNOWN     Unable to detect the current activity.
int     WALKING     The device is on a user who is walking.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可能是拿來偵測玩家是否在跑動和是否在開車
(雖然專家指出，因為他目前實做似乎只有拿三軸資料，IN_VEHICLE ON_BICYCLE都很不準...)&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;只是decompile .dex看code能知道的還是有限
有試著用ELF tools decompile .so檔，但是大部分的symbol都mangled過不好分析&lt;/p&gt;
&lt;p&gt;目前看不出來有做其他的省電機制(e.g. 玩家靜止就降低或停止location query)
想想這款遊戲核心技術部分本來就不在終端裝置，還沒有做多少優化也是滿合理的 : P&lt;/p&gt;
&lt;p&gt;至於剩下有關網路的部分還是看原本的神文就好XD
API實作方法應該不會改動太大&lt;/p&gt;
&lt;p&gt;以上~&lt;/p&gt;</content></entry><entry><title>[Android] N版PowerManager powerHint</title><link href="/android-nban-powermanager-powerhint.html" rel="alternate"></link><published>2016-08-04T04:09:00+08:00</published><updated>2016-08-04T04:09:00+08:00</updated><author><name>Solring Lin</name></author><id>tag:None,2016-08-04:/android-nban-powermanager-powerhint.html</id><summary type="html">&lt;p&gt;(archive) [Android] N版PowerManager powerHint&lt;/p&gt;</summary><content type="html">&lt;p&gt;Power hint顧名思義就是從framework層打hint下去給平台，讓下層知道說現在上面是在謥殺虫(所謂上情下達)
就可以根據情境調整power management的機制(e.g. boost performance, 降freq省電....blahblah)
先來看一下Power HAL有哪些hint:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt; * Power hint identifiers passed to (*powerHint)&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;

&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="k"&gt;enum&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;POWER_HINT_VSYNC&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x00000001&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;POWER_HINT_INTERACTION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x00000002&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="cm"&gt;/* DO NOT USE POWER_HINT_VIDEO_ENCODE/_DECODE!  They will be removed in&lt;/span&gt;
&lt;span class="cm"&gt;     * KLP.&lt;/span&gt;
&lt;span class="cm"&gt;     */&lt;/span&gt;
    &lt;span class="n"&gt;POWER_HINT_VIDEO_ENCODE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x00000003&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;POWER_HINT_VIDEO_DECODE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x00000004&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;POWER_HINT_LOW_POWER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x00000005&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;POWER_HINT_SUSTAINED_PERFORMANCE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x00000006&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;POWER_HINT_VR_MODE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x00000007&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;power_hint_t&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最早感覺是為了解決performance issue(VSYNC, INTERACTION, VIDEO)
後來在project volta增加LOW_POWER，讓平台可以安心進入low power mode ~~而不用被譙UX變差~~
最近N版又多加了SUSTAINED_PERFORMANCE &amp;amp; VR mode
VR就顧名思義
Sustained performance指長時間提供穩定performance，避免thermal throttling
目前是讓app可以由&lt;code&gt;Window&lt;/code&gt;這個class指示進入這個mode&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;void setSustainedPerformanceMode(boolean enable)
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Related sources:&lt;/h1&gt;
&lt;h2&gt;HAL&lt;/h2&gt;
&lt;p&gt;hardware/libhardware/include/hardware/power.h&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;void (*powerHint)(struct power_module *module, power_hint_t hint,
                      void *data);
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Framework (frameworks/)&lt;/h2&gt;
&lt;p&gt;base/core/java/android/os/PowerManagerInternal.java --&amp;gt; 這裡面就看的到囉
base/services/core/java/com/android/server/power/PowerManagerService.java --&amp;gt; java端主要實做&lt;/p&gt;
&lt;p&gt;base/services/core/jni/com_android_server_power_PowerManagerService.cpp --&amp;gt; JNI
native/services/powermanager/IPowerManager.cpp  --&amp;gt; call binder的地方&lt;/p&gt;
&lt;p&gt;其中&lt;code&gt;PhoneWindowManager&lt;/code&gt;和&lt;code&gt;WindowSurfacePlacer&lt;/code&gt;都是透過&lt;code&gt;PowerManagerInternal&lt;/code&gt;下power hint的&lt;/p&gt;
&lt;p&gt;``` java base/services/core/java/com/android/server/policy/PhoneWindowManager.java
mPowerManagerInternal.powerHint(PowerManagerInternal.POWER_HINT_INTERACTION, 0);&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;``` java base/services/core/java/com/android/server/wm/WindowSurfacePlacer.java
        if (mSustainedPerformanceModeCurrent != mSustainedPerformanceModeEnabled) {
            mSustainedPerformanceModeEnabled = mSustainedPerformanceModeCurrent;
            mService.mPowerManagerInternal.powerHint(
                    mService.mPowerManagerInternal.POWER_HINT_SUSTAINED_PERFORMANCE_MODE,
                    (mSustainedPerformanceModeEnabled ? 1 : 0));
        }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Surface Flinger則是從native層使用&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;status_t&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mPowerManager&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;powerHint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;POWER_HINT_VSYNC&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;enabled&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="[Android PowerManagement]"></category></entry><entry><title>[ARM] general registers</title><link href="/arm-general-registers.html" rel="alternate"></link><published>2016-05-05T05:58:00+08:00</published><updated>2016-05-05T05:58:00+08:00</updated><author><name>Solring Lin</name></author><id>tag:None,2016-05-05:/arm-general-registers.html</id><summary type="html">&lt;p&gt;(archive) [ARM] general registers&lt;/p&gt;</summary><content type="html">&lt;p&gt;General Registers
.................&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Name    Number      APCS Role

a1      0           argument 1 / integer result / scratch register
a2      1           argument 2 / scratch register
a3      2           argument 3 / scratch register
a4      3           argument 4 / scratch register

v1      4           register variable
v2      5           register variable
v3      6           register variable
v4      7           register variable
v5      8           register variable

sb/v6   9           static base / register variable
sl/v7   10          stack limit / stack chunk handle / reg. variable
fp      11          frame pointer
ip      12          scratch register / new-sb in inter-link-unit calls
sp      13          lower end of current stack frame
lr      14          link address / scratch register
pc      15          program counter
&lt;/pre&gt;&lt;/div&gt;</content></entry><entry><title>[ARM] bug of binutil for CortexM3/4 .plt generation</title><link href="/arm-bug-of-binutil-for-cortexm34-plt-generation.html" rel="alternate"></link><published>2016-05-05T04:24:00+08:00</published><updated>2016-05-05T04:24:00+08:00</updated><author><name>Solring Lin</name></author><id>tag:None,2016-05-05:/arm-bug-of-binutil-for-cortexm34-plt-generation.html</id><summary type="html">&lt;p&gt;(archive) [ARM] bug of binutil for CortexM3/4 .plt generation&lt;/p&gt;</summary><content type="html">&lt;p&gt;記錄一下最近踩到的地雷
https://sourceware.org/bugzilla/show_bug.cgi?id=16017&lt;/p&gt;</content></entry><entry><title>[轉] C語言字串切割</title><link href="/zhuan-cyu-yan-zi-chuan-qie-ge.html" rel="alternate"></link><published>2016-04-26T12:15:00+08:00</published><updated>2016-04-26T12:15:00+08:00</updated><author><name>Solring Lin</name></author><id>tag:None,2016-04-26:/zhuan-cyu-yan-zi-chuan-qie-ge.html</id><summary type="html">&lt;p&gt;(archive) [轉] C語言字串切割&lt;/p&gt;</summary><content type="html">&lt;p&gt;厲害的分析!
(用了那麼久才知道strtok會改到原字串 :PPPP)
https://xiwan.info/archive/string-split-strtok-strtok-r-strsep.html&lt;/p&gt;</content></entry><entry><title>GNU LD指定symbol address</title><link href="/gnu-ldzhi-ding-symbol-address.html" rel="alternate"></link><published>2016-03-23T05:54:00+08:00</published><updated>2016-03-23T05:54:00+08:00</updated><author><name>Solring Lin</name></author><id>tag:None,2016-03-23:/gnu-ldzhi-ding-symbol-address.html</id><summary type="html">&lt;p&gt;(archive) GNU LD指定symbol address&lt;/p&gt;</summary><content type="html">&lt;p&gt;在Embedded System有時候會需要強制修改shared object用到的OS routine symbol address
讓他可以指到routine在image裡的位置&lt;/p&gt;
&lt;p&gt;一樣是參考&lt;a href="https://ftp.gnu.org/old-gnu/Manuals/ld-2.9.1/html_node/ld_3.html"&gt;手冊&lt;/a&gt;，找到這個option:
&lt;strong&gt;--just-symbols=filename&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Read symbol names and their addresses from filename, but do not relocate it or include it in the output. This allows your output file to refer symbolically to absolute locations of memory defined in other programs. You may use this option more than once. For compatibility with other ELF linkers, if the -R option is followed by a directory name, rather than a file name, it is treated as the -rpath option. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;.........但是你沒講filename是什麼東西啊 =皿=&lt;/p&gt;
&lt;p&gt;後來在這找到&lt;a href="http://stackoverflow.com/questions/495262/linking-symbols-to-fixed-addresses-on-linux"&gt;symbol file的format&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;symbol1 = 0x12345678;
symbol2 = 0x23456789;
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其中等號旁的空白是必須的，如果format不對的話ld會噴error說他看不懂&lt;/p&gt;
&lt;p&gt;用了這個之後，link出來的symbol就會從UND變成ABS啦&lt;/p&gt;
&lt;p&gt;當然也可以用&lt;code&gt;--defsym symbol=0x12345678&lt;/code&gt;，但是symbol一多的時候還是用symbol file比較快&lt;/p&gt;</content></entry><entry><title>GNU LD Script - OVERLAY 和 AT的神奇用法</title><link href="/gnu-ld-script-overlay-he-atde-shen-qi-yong-fa.html" rel="alternate"></link><published>2016-03-10T12:23:00+08:00</published><updated>2016-03-10T12:23:00+08:00</updated><author><name>Solring Lin</name></author><id>tag:None,2016-03-10:/gnu-ld-script-overlay-he-atde-shen-qi-yong-fa.html</id><summary type="html">&lt;p&gt;(archive) GNU LD Script - OVERLAY 和 AT的神奇用法&lt;/p&gt;</summary><content type="html">&lt;p&gt;GNU ld linker有設計一套專用的script，可以讓programmer自訂你link出來的東西長什麼樣(?
從Memory的layout、code RO/RW data的位置、Load前和實際上run的address等等
這樣的工具在Embedded System很常用到&lt;/p&gt;
&lt;p&gt;詳細的用法可以參照&lt;a href="http://www.math.utah.edu/docs/info/ld_3.html"&gt;手冊&lt;/a&gt;和這位大大整理的&lt;a href="http://wen00072-blog.logdown.com/posts/246070-study-on-the-linker-script-2-setcion-command"&gt;導讀&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;OVERLAY&lt;/h2&gt;
&lt;p&gt;這個功能應該只有Embedded比較會用到XD
主要就是讓兩個不同的code/data可以放在同一地方跑&lt;/p&gt;
&lt;p&gt;不同於手冊的範例也可以這樣寫&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;MEMORY {
  ROM : ORIGIN = 0x00000000, LENGTH = 8K
  RAM : ORIGIN = 0x00002000, LENGTH = 120K
}

SECTION {
　...
    OVERLAY : {
    .text1 { *(.text1) }
  } &amp;gt; RAM AT &amp;gt; ROM
  ...
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這樣這個Section的LMA就會和其他Section照順序被排進RAM，而LMA則是照順序排進ROM
&lt;strong&gt;但要注意的是，這樣做的話在OVERLAY後面的section的LMA也會被自動排進ROM&lt;/strong&gt;
在後面的section手動用&lt;code&gt;&amp;gt; RAM&lt;/code&gt;也無效，要再研究一下有沒有其他辦法設定&lt;/p&gt;</content></entry><entry><title>幫elf減肥</title><link href="/bang-elfjian-fei.html" rel="alternate"></link><published>2016-02-24T07:12:00+08:00</published><updated>2016-02-24T07:12:00+08:00</updated><author><name>Solring Lin</name></author><id>tag:None,2016-02-24:/bang-elfjian-fei.html</id><summary type="html">&lt;p&gt;(archive) 幫elf減肥&lt;/p&gt;</summary><content type="html">&lt;p&gt;編譯完的elf檔案都預設會包含symbol table和debug等等資料
如果要去除的話可以用strip&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cp myApp myApp_striped
strip myApp_striped
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;另外還有objcopy可以用&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;objcopy -R .comment -R .note.ABI-tag -R .gnu.version HelloWorld HelloWorld_obj
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ref: 
http://calamaryshop.blogspot.tw/2011/11/linux-strip-objcopy.htmlhttp://calamaryshop.blogspot.tw/2011/11/linux-strip-objcopy.html&lt;/p&gt;</content></entry><entry><title>Vim &amp; tmux plugins</title><link href="/vim-tmux-plugins.html" rel="alternate"></link><published>2016-01-25T02:50:00+08:00</published><updated>2016-01-25T02:50:00+08:00</updated><author><name>Solring Lin</name></author><id>tag:None,2016-01-25:/vim-tmux-plugins.html</id><summary type="html">&lt;p&gt;(archive) Vim &amp;amp; tmux plugins&lt;/p&gt;</summary><content type="html">&lt;p&gt;整理一下目前使用的一些Vim plugin和tmux設定&lt;/p&gt;
&lt;h1&gt;Vundle&lt;/h1&gt;
&lt;p&gt;不管怎樣都要先裝Vundle~&lt;/p&gt;
&lt;p&gt;下載&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;修改&lt;code&gt;.vimrc&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;set nocompatible
filetype off

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin &amp;#39;gmarik/Vundle.vim&amp;#39;

call vundle#end()
filetype plugin indent on
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;再重新打開vim輸入&lt;code&gt;:PluginInstall&lt;/code&gt;就OK了
或是&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;vim +PluginInstall +qall
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;之後要安裝其他的Plugin
就只要在&lt;code&gt;vundle#begin&lt;/code&gt;之後加想要安裝的Plugin, 再&lt;code&gt;:PluginInstall&lt;/code&gt;就可以了&lt;/p&gt;
&lt;h1&gt;vim-airline&lt;/h1&gt;
&lt;p&gt;純vimscript版本的Powerline
有各種theme，還支援git virtualenv等狀態
https://github.com/vim-airline/vim-airline&lt;/p&gt;
&lt;p&gt;Vundle:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Plugin &amp;#39;vim-airline/vim-airline&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;安裝之後需要在&lt;code&gt;.vimrc&lt;/code&gt;加上這兩行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;set laststatus=2
let g:airline_theme=&amp;#39;solarized&amp;#39; // choose your vim-airline theme
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;裝完就可以直接用了~&lt;/p&gt;
&lt;h2&gt;Trouble shooting&lt;/h2&gt;
&lt;p&gt;如果看起來只有白色的符號和字，可能是顯示設定問題
在.vimrc裡面加上，設定使用256的color code&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;set t_Co=256
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果看不到目前branch，可能是還沒安裝&lt;a href="https://github.com/tpope/vim-fugitive"&gt;fugitive&lt;/a&gt;
一樣可以用Vundle安裝~&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Plugin &amp;#39;tpope/vim-fugitive&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;
使用tmux的話要加-2這個option才能讓vim知道terminal(tmux)支援256 bit color
不然的話顏色都只有8色～&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tmux -2 attach -t &lt;span class="m"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;安裝Powerline fonts&lt;/h2&gt;
&lt;p&gt;要顯示branch等特殊符號的話，還要加裝Powerline fonts &amp;amp; symbols&lt;/p&gt;
&lt;p&gt;先執行以下script&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir .font/&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; .font/
git clone https://github.com/Lokaltog/powerline-fonts.git 
&lt;span class="nb"&gt;cd&lt;/span&gt; powerline-fonts/
./install.sh
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;之後再設定你使用的terminal字形為剛剛安裝的powerline font
字形列表可參考官方
https://github.com/powerline/fonts&lt;/p&gt;
&lt;p&gt;設定.vimrc 讓vim-airline使用powerline的symbols&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;quot; Enable powerline fonts
let g:airline_powerline_fonts = 1
if !exists(&amp;#39;g:airline_symbols&amp;#39;)
let g:airline_symbols = {}
endif

&amp;quot; Powerline symbols: unicode
let g:airline_left_sep = &amp;#39;»&amp;#39;
let g:airline_left_sep = &amp;#39;▶&amp;#39;
let g:airline_right_sep = &amp;#39;«&amp;#39;
let g:airline_right_sep = &amp;#39;◀&amp;#39;
let g:airline_symbols.linenr = &amp;#39;␊&amp;#39;
let g:airline_symbols.linenr = &amp;#39;␤&amp;#39;
let g:airline_symbols.linenr = &amp;#39;¶&amp;#39;
let g:airline_symbols.branch = &amp;#39;⎇&amp;#39;
let g:airline_symbols.paste = &amp;#39;ρ&amp;#39;
let g:airline_symbols.paste = &amp;#39;Þ&amp;#39;
let g:airline_symbols.paste = &amp;#39;∥&amp;#39;
let g:airline_symbols.whitespace = &amp;#39;Ξ&amp;#39;

&amp;quot; Powerline symbols: powerline fonts
let g:airline_left_sep = &amp;#39;&amp;#39;
let g:airline_left_alt_sep = &amp;#39;&amp;#39;
let g:airline_right_sep = &amp;#39;&amp;#39;
let g:airline_right_alt_sep = &amp;#39;&amp;#39;
let g:airline_symbols.branch = &amp;#39;&amp;#39;
let g:airline_symbols.readonly = &amp;#39;&amp;#39;
let g:airline_symbols.linenr = &amp;#39;&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Tmuxline&lt;/h1&gt;
&lt;p&gt;Powerline style的tmux status bar
可以直接用vim-airline的theme~
https://github.com/edkolev/tmuxline.vim&lt;/p&gt;
&lt;p&gt;Vundle:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Plugin &amp;#39;edkolev/tmuxline.vim&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;之後在vim裡面下&lt;code&gt;:Tmuxline airline&lt;/code&gt; 就可以選用airline的theme&lt;/p&gt;
&lt;h1&gt;SnipMate&lt;/h1&gt;
&lt;p&gt;超好用BJ4
一樣用Vundle安裝就可以了
安裝完SnipMate之後可以加安裝preset snippets&lt;/p&gt;
&lt;p&gt;.vimrc&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;quot; SnipMate
Plugin &amp;#39;MarcWeber/vim-addon-mw-utils&amp;#39;
Plugin &amp;#39;tomtom/tlib_vim&amp;#39;
Plugin &amp;#39;garbas/vim-snipmate&amp;#39;

&amp;quot; Snippets
Plugin &amp;#39;honza/vim-snippets&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;其他好用Plugin&lt;/h1&gt;
&lt;h2&gt;Syntastic&lt;/h2&gt;
&lt;p&gt;語法檢查
用Vundle安裝的話在.vimrc加這行就OK了&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Plugin &amp;#39;Syntastic&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;or&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Plugin &amp;#39;scrooloose/syntastic&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Auto complete&lt;/h2&gt;
&lt;p&gt;我是使用AutoComlPop這個plugin
一樣用Vundle安裝就OK&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Plugin &amp;#39;AutoCompPop&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;還有一個YouCompleteMe好像比較有名，之後再試試XD&lt;/p&gt;
&lt;h2&gt;Auto pair&lt;/h2&gt;
&lt;p&gt;簡單的懶人好物XD 自動打出一組括號&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Plugin &amp;#39;Auto-Pairs&amp;#39;
&lt;/pre&gt;&lt;/div&gt;</content></entry><entry><title>VPN material</title><link href="/vpn-material.html" rel="alternate"></link><published>2016-01-21T08:05:00+08:00</published><updated>2016-01-21T08:05:00+08:00</updated><author><name>Solring Lin</name></author><id>tag:None,2016-01-21:/vpn-material.html</id><summary type="html">&lt;p&gt;(archive) VPN material&lt;/p&gt;</summary><content type="html"></content></entry><entry><title>[GIT] Tips &amp; 碎碎念</title><link href="/git-tips-sui-sui-nian.html" rel="alternate"></link><published>2016-01-19T07:45:00+08:00</published><updated>2016-01-19T07:45:00+08:00</updated><author><name>Solring Lin</name></author><id>tag:None,2016-01-19:/git-tips-sui-sui-nian.html</id><summary type="html">&lt;p&gt;(archive) [GIT] Tips &amp;amp; 碎碎念&lt;/p&gt;</summary><content type="html">&lt;p&gt;終於有時間把這一兩個月參與Project遇到的小問題&amp;amp;解法紀錄下來啦(淚&lt;/p&gt;
&lt;h3&gt;Conflict of binary files&lt;/h3&gt;
&lt;p&gt;在merge or rebase的時候
當Project裡面有一些prebuilt lib之類的東西conflict的時候
就要手動solve......都已經變binary了無法手動選自己需要的feature啦ˊ_&amp;gt;ˋ
只好二選一，不是你的就是我的&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 選擇merge來源的&lt;/span&gt;
git checkout --theirs &lt;span class="o"&gt;[&lt;/span&gt;binary file name&lt;span class="o"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# 選擇原本branch的&lt;/span&gt;
git checkout --ours &lt;span class="o"&gt;[&lt;/span&gt;binary file name&lt;span class="o"&gt;]&lt;/span&gt;

git add &lt;span class="o"&gt;[&lt;/span&gt;binary file name&lt;span class="o"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# add &amp;amp; commit if doing merge&lt;/span&gt;
git commit

&lt;span class="c1"&gt;# continue if doing rebase&lt;/span&gt;
git rebase --continue
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;修改上一個Commit message or 多加修改內容&lt;/h3&gt;
&lt;p&gt;有時候實在會腦殘忘記要多改什麼東西 or 眼殘忘記add哪個改好的file
但相對應的內容的commit進去了
這個時候就可以用&lt;code&gt;--amend&lt;/code&gt;這個參數:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git add &lt;span class="o"&gt;[&lt;/span&gt;some thing u forgot to add :P&lt;span class="o"&gt;]&lt;/span&gt;
git commit --amend
&lt;span class="c1"&gt;# Use editor edit commit msg&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這樣就不會多一個新的commit，而是拿上次的commit內容再重新commit一次
也因為這樣&lt;strong&gt;commit的SHA1會改變&lt;/strong&gt;
意思是說，如果之前的commit已經上傳到remote的話就沒救啦XDDD
想要push上去會一直被reject QQ
這個時候就只好回復到remote的版本，再乖乖多加一個commit啦&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 回到上一個commit，並把修改的東西pop到working tree&lt;/span&gt;
git reset HEAD^

&lt;span class="c1"&gt;# save your new changes&lt;/span&gt;
git stash

&lt;span class="c1"&gt;# 完全回復到這個commit, 之後fast forward才不會掛掉&lt;/span&gt;
git reset --hard HEAD &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; git clean -df
git merge &lt;span class="o"&gt;[&lt;/span&gt;your remote&lt;span class="o"&gt;]&lt;/span&gt;/&lt;span class="o"&gt;[&lt;/span&gt;corresponding branch&lt;span class="o"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# 把新修改的pop出來&lt;/span&gt;
git stash pop

&lt;span class="c1"&gt;# 重新commit...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;清除所有untracked files&lt;/h3&gt;
&lt;p&gt;解決上一個問題所發現的新招 :P&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clean -df

# 包含回復.gitignore的話:
git clean -dfx
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Rebase 多個conflict&lt;/h3&gt;
&lt;p&gt;有時候開branch自己開心的開發完，想要rebase回去比較漂亮的時候
就會發現master也改到你的東西啦
如果想要以master為準的話
就會發現每rebase continue一次就要手動solve一次conflict............
這個時候除了乖乖用merge以外
也可以用squash把多個commit合併，這樣只要solve一次就可以了&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git rebase -i master

# in vim
squash SHA1_1 your_first_commit
squash SHA1_2 your_second_commit
...
pick SHA1 your_last_commit
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;不過這麼作的話就會把很多不相關的commit都打包在一起 :/
所以比較厚工的作法就是rebase到不會出現conflict的地方
再將master rebase到該branch上
必要的時候可能還要先整理一下master branch :/&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# at branch dev
git rebase --onto [SHA1 of the commit]
git checkout master
git rebase dev
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;應該還有更漂亮的解決方法
不過重點是要盡量避開這種狀況 : P&lt;/p&gt;</content></entry><entry><title>GitLab &amp; GitLab CI 筆記 (備用)</title><link href="/gitlab-gitlab-ci-bi-ji-bei-yong.html" rel="alternate"></link><published>2016-01-13T05:51:00+08:00</published><updated>2016-01-13T05:51:00+08:00</updated><author><name>Solring Lin</name></author><id>tag:None,2016-01-13:/gitlab-gitlab-ci-bi-ji-bei-yong.html</id><summary type="html">&lt;p&gt;(archive) GitLab &amp;amp; GitLab CI 筆記 (備用)&lt;/p&gt;</summary><content type="html">&lt;p&gt;使用Docker架設
http://notes.jigsawye.com/2015/09/25/gitlab-ce-in-docker/&lt;/p&gt;
&lt;p&gt;讓Project使用GitLab CI
http://doc.gitlab.com/ce/ci/quick_start/README.html&lt;/p&gt;</content></entry><entry><title>[Linux] Execution檔shared library 名稱錯誤</title><link href="/linux-executiondang-shared-library-ming-cheng-cuo-wu.html" rel="alternate"></link><published>2015-12-22T06:51:00+08:00</published><updated>2015-12-22T06:51:00+08:00</updated><author><name>Solring Lin</name></author><id>tag:None,2015-12-22:/linux-executiondang-shared-library-ming-cheng-cuo-wu.html</id><summary type="html">&lt;p&gt;(archive) [Linux] Execution檔shared library 名稱錯誤&lt;/p&gt;</summary><content type="html">&lt;p&gt;用NDK使用prebuilt library編execution時意外產生奇觀:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ readelf -d test-audio
Dynamic section at offset 0x35b54 contains &lt;span class="m"&gt;30&lt;/span&gt; entries:
  Tag        Type                         Name/Value
 0x00000003 &lt;span class="o"&gt;(&lt;/span&gt;PLTGOT&lt;span class="o"&gt;)&lt;/span&gt;                     0x36ed4
 ......
 0x00000001 &lt;span class="o"&gt;(&lt;/span&gt;NEEDED&lt;span class="o"&gt;)&lt;/span&gt;                     Shared library: &lt;span class="o"&gt;[&lt;/span&gt;D:/DL/audioWorkspace//obj/local/armeabi-v7a/libkaldifeats.so&lt;span class="o"&gt;]&lt;/span&gt;
 0x00000001 &lt;span class="o"&gt;(&lt;/span&gt;NEEDED&lt;span class="o"&gt;)&lt;/span&gt;                     Shared library: &lt;span class="o"&gt;[&lt;/span&gt;libvieswip_wrapper.so&lt;span class="o"&gt;]&lt;/span&gt;
 0x00000001 &lt;span class="o"&gt;(&lt;/span&gt;NEEDED&lt;span class="o"&gt;)&lt;/span&gt;                     Shared library: &lt;span class="o"&gt;[&lt;/span&gt;libvieswip.so&lt;span class="o"&gt;]&lt;/span&gt;
 0x00000001 &lt;span class="o"&gt;(&lt;/span&gt;NEEDED&lt;span class="o"&gt;)&lt;/span&gt;                     Shared library: &lt;span class="o"&gt;[&lt;/span&gt;libstdc++.so&lt;span class="o"&gt;]&lt;/span&gt;
 0x00000001 &lt;span class="o"&gt;(&lt;/span&gt;NEEDED&lt;span class="o"&gt;)&lt;/span&gt;                     Shared library: &lt;span class="o"&gt;[&lt;/span&gt;libm.so&lt;span class="o"&gt;]&lt;/span&gt;
 0x00000001 &lt;span class="o"&gt;(&lt;/span&gt;NEEDED&lt;span class="o"&gt;)&lt;/span&gt;                     Shared library: &lt;span class="o"&gt;[&lt;/span&gt;libc.so&lt;span class="o"&gt;]&lt;/span&gt;
 0x00000001 &lt;span class="o"&gt;(&lt;/span&gt;NEEDED&lt;span class="o"&gt;)&lt;/span&gt;                     Shared library: &lt;span class="o"&gt;[&lt;/span&gt;libdl.so&lt;span class="o"&gt;]&lt;/span&gt;
 0x0000001a &lt;span class="o"&gt;(&lt;/span&gt;FINI_ARRAY&lt;span class="o"&gt;)&lt;/span&gt;                 0x360f8
 ......
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Shared library居然出現Window整個檔案路徑!?
而且其他自己包的shared lib都沒事，就只有第一個出意外
一開始還以為是Android.mk寫錯
結果後來發現是第一個lib沒有SONAME的關係&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ readelf -d libkaldifeats.so &lt;span class="p"&gt;|&lt;/span&gt; grep SONAME
$ &lt;span class="o"&gt;(&lt;/span&gt;nothing...&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;趕緊用&lt;code&gt;-Wl,-soname,libkaldifeats.so&lt;/code&gt;補加SONAME就解決啦~&lt;/p&gt;</content></entry><entry><title>[Tips] Include static libraries in shared library</title><link href="/tips-include-static-libraries-in-shared-library.html" rel="alternate"></link><published>2015-12-15T06:48:00+08:00</published><updated>2015-12-15T06:48:00+08:00</updated><author><name>Solring Lin</name></author><id>tag:None,2015-12-15:/tips-include-static-libraries-in-shared-library.html</id><summary type="html">&lt;p&gt;(archive) [Tips] Include static libraries in shared library&lt;/p&gt;</summary><content type="html">&lt;p&gt;//又是個不記下來就老是忘記的參數orz&lt;/p&gt;
&lt;p&gt;Ref: 
http://stackoverflow.com/questions/14889941/link-a-static-library-to-a-shared-one-during-build
http://stackoverflow.com/questions/2649735/how-to-link-static-library-into-dynamic-library-in-gcc&lt;/p&gt;
&lt;p&gt;在link時加上&lt;code&gt;-Wl,-whole-archive&lt;/code&gt;，後面接著要包進去的static library
注意一下要還原的話要加上&lt;code&gt;-Wl,-no-whole-archive&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;g++ -shared samlpe.o -o libSample.so -Wl,-whole-archive -lmylib1.a -lmylib2.a -Wl,-no-whole-archive
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這樣會把&lt;strong&gt;整個Static library&lt;/strong&gt;都包進去
如果沒有加的話，會只包用到的部份&lt;/p&gt;</content></entry><entry><title>[Note] 機器學習速遊</title><link href="/note-ji-qi-xue-xi-su-you.html" rel="alternate"></link><published>2015-12-12T01:08:00+08:00</published><updated>2015-12-12T01:08:00+08:00</updated><author><name>Solring Lin</name></author><id>tag:None,2015-12-12:/note-ji-qi-xue-xi-su-you.html</id><summary type="html">&lt;p&gt;(archive) [Note] 機器學習速遊&lt;/p&gt;</summary><content type="html">&lt;p&gt;SlideShare: http://www.slideshare.net/tw_dsconf/ss-56071386&lt;/p&gt;
&lt;h1&gt;Learning from Data&lt;/h1&gt;
&lt;p&gt;ML: improving some &lt;strong&gt;performance measure&lt;/strong&gt; with &lt;strong&gt;experience computed&lt;/strong&gt; from data&lt;/p&gt;
&lt;h2&gt;Scenarios&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Rapid decision&lt;/li&gt;
&lt;li&gt;Unknwon situation&lt;/li&gt;
&lt;li&gt;Hard to define the solution/cannot find solution &lt;/li&gt;
&lt;li&gt;Massive scale
e.g. ML is a route to realize AI&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Thrive of ML&lt;/h2&gt;
&lt;p&gt;收集資料越來越容易
資料越來越多
計算越來越便宜&lt;/p&gt;
&lt;h2&gt;Nodation&lt;/h2&gt;
&lt;p&gt;input: &lt;em&gt;x&lt;/em&gt;
output: &lt;em&gt;y&lt;/em&gt;
unknown pattern: &lt;em&gt;f: x -&amp;gt; y&lt;/em&gt; //未知的完美的規則或答案 
training example: &lt;em&gt;D&lt;/em&gt;
hypothesis: &lt;em&gt;g: x -&amp;gt; y&lt;/em&gt; //可能的規則&lt;/p&gt;
&lt;p&gt;http://www.slideshare.net/tw_dsconf/ss-56071386/13?src=clipshare&lt;/p&gt;
&lt;h2&gt;Essence of ML&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;可能有pattern&lt;/li&gt;
&lt;li&gt;很難手動找規則or其他解法&lt;/li&gt;
&lt;li&gt;有data&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Q &amp;amp; A&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;hypothesis set &amp;amp; training data 會受到domain knowledge影響&lt;/li&gt;
&lt;li&gt;hypothesis set理想上不會更新，大小非常大; 實務上會由人手動改變&lt;/li&gt;
&lt;li&gt;f 這邊假設是唯一不變的 (we dnot know~ &lt;/li&gt;
&lt;li&gt;什麼時候要用semi-supervised learning? 要有多少label才能做supervised?
supervised比較簡單，可以拿來當baseline
在來試semi-supervised&lt;/li&gt;
&lt;li&gt;什麼時候用regression or multi classification
可以先用regression試試，在從問題看有沒有可能用multi classification做來improve performance&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Binary classification&lt;/h2&gt;
&lt;p&gt;是非題(?&lt;/p&gt;
&lt;h2&gt;Multi classification&lt;/h2&gt;
&lt;p&gt;選擇題&lt;/p&gt;
&lt;h2&gt;Regression&lt;/h2&gt;
&lt;p&gt;答案是continuous的(實數)
e.g. 今天的濕度 -&amp;gt; 明天氣溫會幾度到底度&lt;/p&gt;
&lt;h2&gt;Reinforcement learning&lt;/h2&gt;
&lt;p&gt;不能直接標記什麼結果是對的
用間接的index去標記結果?
e.g. 廣告推薦：user點擊推薦的廣告 -&amp;gt; 獎勵&lt;/p&gt;
&lt;h2&gt;Steps&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;choose error measure&lt;/li&gt;
&lt;li&gt;choose hypothesis set 
    e.g. linear classifier(perceptron&lt;/li&gt;
&lt;li&gt;optimize error&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Gerneralization&lt;/h2&gt;
&lt;p&gt;通常簡單的hypothesis也可以gerneralization&lt;/p&gt;
&lt;h1&gt;Fundamental Machine Learning Models&lt;/h1&gt;
&lt;h2&gt;Linear Regression&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;h(x) = w^Tx
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;E(w): residuals (e.g. squared error
E(w)要是一個quadratic convex
基本算法：找min(E(w)) =&amp;gt; 找E(w)微分=0的地方 (closed-form solution
=&amp;gt; w = x'y&lt;/p&gt;
&lt;p&gt;簡單，有理論基礎，快速
可以拿來當baseline&lt;/p&gt;
&lt;h2&gt;Logistic Regression&lt;/h2&gt;
&lt;p&gt;未來發生ＸＸＸ的機率有多少？ 答案是在[0,1]之間
Soft binary classification
用logistic function把分數轉換成機率,轉換到[0,1]的區間&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;h(w) = \theta(w^Tx)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;E(w) : Maximum likelyhood (cross-entropy)
find min(E(w) =&amp;gt; gradient decent&lt;/p&gt;
&lt;p&gt;http://www.slideshare.net/tw_dsconf/ss-56071386/65?src=clipshare&lt;/p&gt;
&lt;h2&gt;Nonlinear Transformation&lt;/h2&gt;
&lt;p&gt;有的時候用一般線性binary classification切不開
solution 想辦法把data 的space轉到另一個有linear model的space (Feature transform)
h(x) = 某種非線性函數
h'(x) = sign(w^Tz)&lt;/p&gt;
&lt;h2&gt;Decision Tree&lt;/h2&gt;
&lt;h1&gt;Hazard of Overfitting&lt;/h1&gt;
&lt;p&gt;VC dimension: 模型複雜度
複雜度上昇 -&amp;gt; in-sample error 下降 -&amp;gt; 複雜度代價(造成的error)上昇
Eout &amp;lt;= Ein + Overhead from complexity&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Reasons of overfitting&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Noise太多&lt;/li&gt;
&lt;li&gt;總共的training data太少&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Tips&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先從簡單安全的model(linear model)開始&lt;/li&gt;
&lt;li&gt;data cleaning/pruning: 清除noise&lt;/li&gt;
&lt;li&gt;data hinting: 增加資料量&lt;/li&gt;
&lt;li&gt;regularization&lt;/li&gt;
&lt;li&gt;validation&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;將複雜度的方法&lt;/strong&gt;
- 降維
- refine Feature transform&lt;/p&gt;
&lt;h2&gt;Data Manipulation and Regularization&lt;/h2&gt;
&lt;h3&gt;Data cleaning/pruning&lt;/h3&gt;
&lt;p&gt;可能有用
現有的ML algo有的已經可以避掉noise&lt;/p&gt;
&lt;h3&gt;Data hinting&lt;/h3&gt;
&lt;p&gt;把現有的training data（在沒有影響的情況下）修改一下擴充
=&amp;gt; 自己生資料&lt;/p&gt;
&lt;h3&gt;Regularization&lt;/h3&gt;
&lt;p&gt;Minimizing Augmented Error&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;E_{aug}(w) = E_{in}(w) + \frac{\lambda}{n} w^Tw, \\
w^Tw: regularizer
\lambda: regularization parameter
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;怎麼選lambda可以由validation決定&lt;/p&gt;
&lt;h3&gt;Validation&lt;/h3&gt;
&lt;p&gt;把部分data set留下來在第一次training後做驗證(測驗)，再拿驗證結果選擇最後model&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;拿training data 用多algo learn出多個model&lt;/li&gt;
&lt;li&gt;用validation model選出最好的algo&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;再拿所有的data用選出來的algo learn出最終的model&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;隨機選取&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;training data &amp;amp; validation data要分開&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;V-fold Cross-Validation
(V-1)/V data 拿來train, 1/V 拿來validation&lt;/p&gt;
&lt;h2&gt;Principles&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Occam's Razor
對data的解釋(model)越簡單越好&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sampling Bias
如果data有bias, 學出來的東西也會有bias&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Visual Data Snooping
“偷看資料”
可能會自己把model調的太複雜&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;Modern Machine Learning Models&lt;/h1&gt;
&lt;h2&gt;SVM&lt;/h2&gt;
&lt;p&gt;找跟sample data們都最遠的分隔線(largest-margin)
同時minimize separation error
已經有regularization(待證明&lt;/p&gt;
&lt;p&gt;non-linear + 資料量大的話比較不適合&lt;/p&gt;
&lt;p&gt;Gaussian SVM: 用Gaussian kernel 做 Feature Transformation&lt;/p&gt;
&lt;h2&gt;Random Forest&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;抽樣&lt;/li&gt;
&lt;li&gt;做出n顆decision tree&lt;/li&gt;
&lt;li&gt;投票&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;內建有feature selection&lt;/p&gt;
&lt;h3&gt;Feature selection&lt;/h3&gt;
&lt;p&gt;去掉多餘或無關的feature
方法一： Ramdom test
故意塞在某個feature維度noise，效果差越多越重要&lt;/p&gt;
&lt;h2&gt;Adaptive Boosting&lt;/h2&gt;
&lt;p&gt;有點類似decision tree?
先用某個algo(regression, classification...)train某個model (更精確地說是某種feature transformation)
算出正確label和model算出的label的"距離"
再拿"距離"和input(x), 正確label(y)重複放進algo算出新model
最後再把這些model(transformation)組合起來
通常是用linear regression&lt;/p&gt;
&lt;h1&gt;References&lt;/h1&gt;
&lt;p&gt;KDDCup
http://kddcup2015.com/information.html&lt;/p&gt;
&lt;p&gt;Semi-supervised learning
http://pages.cs.wisc.edu/~jerryzhu/pub/sslicml07.pdf&lt;/p&gt;
&lt;p&gt;Scikit-learn
https://github.com/scikit-learn/scikit-learn
http://scikit-learn.org/stable/index.html&lt;/p&gt;</content></entry><entry><title>OpenCV Cascade Classifier training</title><link href="/opencv-cascade-classifier-training.html" rel="alternate"></link><published>2015-12-07T05:21:00+08:00</published><updated>2015-12-07T05:21:00+08:00</updated><author><name>Solring Lin</name></author><id>tag:None,2015-12-07:/opencv-cascade-classifier-training.html</id><summary type="html">&lt;p&gt;(archive) OpenCV Cascade Classifier training&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Tutorial&lt;/h3&gt;
&lt;p&gt;http://docs.opencv.org/2.4/doc/user_guide/ug_traincascade.html
http://coding-robin.de/2013/07/22/train-your-own-opencv-haar-classifier.html&lt;/p&gt;
&lt;p&gt;http://answers.opencv.org/question/7141/about-traincascade-paremeters-samples-and-other/&lt;/p&gt;
&lt;h3&gt;一些設定posNum要注意的問題&lt;/h3&gt;
&lt;p&gt;http://stackoverflow.com/questions/10863560/haar-training-opencv-assertion-failed&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;vec-file has to contain &amp;gt;= (numPos + (numStages-1) x (1 - minHitRate) x numPos) + S&lt;/strong&gt;
S: count of samples from vec-file that can be recognized as background right away (num bg image in background file descriptor)&lt;/p&gt;
&lt;h3&gt;Other tips&lt;/h3&gt;
&lt;p&gt;http://answers.opencv.org/question/19117/using-opencv_traincascade-and-speed-up-the-processing/&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;背景不要用白的&lt;/li&gt;
&lt;li&gt;HAAS會比LBP慢很多&lt;/li&gt;
&lt;/ol&gt;</content></entry><entry><title>[Android Studio] Import project from Git</title><link href="/android-studio-import-project-from-git.html" rel="alternate"></link><published>2015-12-04T08:24:00+08:00</published><updated>2015-12-04T08:24:00+08:00</updated><author><name>Solring Lin</name></author><id>tag:None,2015-12-04:/android-studio-import-project-from-git.html</id><summary type="html">&lt;p&gt;(archive) [Android Studio] Import project from Git&lt;/p&gt;</summary><content type="html">&lt;p&gt;不記下來就會一直忘記XD&lt;/p&gt;
&lt;p&gt;ref: 
https://teamtreehouse.com/library/android-tools/using-git-for-android/pulling-down-github-projects-to-android-studio&lt;/p&gt;
&lt;p&gt;VCS -&amp;gt; Checkout form Version Control -&amp;gt; Git 
輸入repo name(走http)還有帳密就可以了&lt;/p&gt;</content></entry><entry><title>[Android][Hack] 工具＆步驟整理</title><link href="/androidhack-gong-ju-bu-zou-zheng-li.html" rel="alternate"></link><published>2015-11-24T07:08:00+08:00</published><updated>2015-11-24T07:08:00+08:00</updated><author><name>Solring Lin</name></author><id>tag:None,2015-11-24:/androidhack-gong-ju-bu-zou-zheng-li.html</id><summary type="html">&lt;p&gt;(archive) [Android][Hack] 工具＆步驟整理&lt;/p&gt;</summary><content type="html">&lt;p&gt;如果懶得從AOSP上抓下來自己編的話 這邊有一些prebuild tools：&lt;/p&gt;
&lt;h2&gt;Various prebuild tools...&lt;/h2&gt;
&lt;p&gt;http://web.djodjo.org/?a=download:android:tools:x86_linux:alltools&lt;/p&gt;
&lt;h2&gt;Unpack/pack system.img&lt;/h2&gt;
&lt;p&gt;simg2img, make_ext4fs
https://github.com/EpicAOSP/make_ext4&lt;/p&gt;
&lt;p&gt;Steps:
http://muzso.hu/2012/08/10/how-to-pack-and-unpack-system.img-and-userdata.img-from-an-android-factory-image&lt;/p&gt;
&lt;p&gt;如果遇到 error: do_inode_allocate_extents 類似的問題 可能是img size設錯
http://www.ithao123.cn/content-5224672.html&lt;/p&gt;
&lt;h2&gt;Unpack/pack ramdisk.img&lt;/h2&gt;
&lt;p&gt;Unpack&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir ramdisk
cd ramdisk
gunzip -c ../ramdisk.img | cpio -i
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pack&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# in ramdisk dir 
find . | cpio -o -H newc | gzip &amp;gt; ../ramdisk.img
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Make boot.img&lt;/h2&gt;
&lt;p&gt;ref: 
http://blog.djodjo.org/?p=536&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;mkbootimg&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;kernel&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;kernel&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;ramdisk&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ramdisk&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果要指定block size等參數：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;mkbootimg&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;kernel&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;kernel&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;ramdisk&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ramdisk&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;\
&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;base&lt;/span&gt; &lt;span class="mh"&gt;0x10000000&lt;/span&gt; &lt;span class="err"&gt;–&lt;/span&gt;&lt;span class="n"&gt;pagesize&lt;/span&gt; &lt;span class="mi"&gt;2048&lt;/span&gt; &lt;span class="err"&gt;–&lt;/span&gt;&lt;span class="n"&gt;kernel_offset&lt;/span&gt; &lt;span class="mh"&gt;0x00008000&lt;/span&gt; &lt;span class="err"&gt;–&lt;/span&gt;&lt;span class="n"&gt;ramdisk_offset&lt;/span&gt; &lt;span class="mh"&gt;0x01000000&lt;/span&gt; \
&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如何得到offsets:
http://blog.djodjo.org/?p=195&lt;/p&gt;</content></entry><entry><title>介紹Android Camera 2 不錯的slide</title><link href="/jie-shao-android-camera-2-bu-cuo-de-slide.html" rel="alternate"></link><published>2015-11-12T09:36:00+08:00</published><updated>2015-11-12T09:36:00+08:00</updated><author><name>Solring Lin</name></author><id>tag:None,2015-11-12:/jie-shao-android-camera-2-bu-cuo-de-slide.html</id><summary type="html">&lt;p&gt;(archive) 介紹Android Camera 2 不錯的slide&lt;/p&gt;</summary><content type="html">&lt;p&gt;http://www.slideshare.net/lbk003/b-kaur-computationalphotographycamera2v3ss
架構在第22 23&lt;/p&gt;
&lt;iframe src="//www.slideshare.net/slideshow/embed_code/key/IFBAPzCzMeRObh" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen&gt; &lt;/iframe&gt;

&lt;p&gt;&lt;div style="margin-bottom:5px"&gt; &lt;strong&gt; &lt;a href="//www.slideshare.net/lbk003/b-kaur-computationalphotographycamera2v3ss" title="Android 5.0 Camera2 APIs" target="_blank"&gt;Android 5.0 Camera2 APIs&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href="//www.slideshare.net/lbk003" target="_blank"&gt;Balwinder Kaur&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/p&gt;</content></entry><entry><title>[OpenCV][Android] Build OpenCV Android SDK &amp; enable OpenCL</title><link href="/opencvandroid-build-opencv-android-sdk-enable-opencl.html" rel="alternate"></link><published>2015-11-04T08:22:00+08:00</published><updated>2015-11-04T08:22:00+08:00</updated><author><name>Solring Lin</name></author><id>tag:None,2015-11-04:/opencvandroid-build-opencv-android-sdk-enable-opencl.html</id><summary type="html">&lt;p&gt;(archive) [OpenCV][Android] Build OpenCV Android SDK &amp;amp; enable OpenCL&lt;/p&gt;</summary><content type="html">&lt;h2&gt;設NDK環境變數&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;ANDROID_NDK&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/path/to/your/ndk
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;修改cmake參數&lt;/h2&gt;
&lt;p&gt;到opencv的source root
修改 &lt;em&gt;platforms/scripts/cmake_android_arm.sh&lt;/em&gt;
加上&lt;code&gt;-DWITH_OPENCL=ON&lt;/code&gt;
如果要加build opencv contrib也可以改在這裡&lt;/p&gt;
&lt;h2&gt;執行script&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd platform
./script/cmake_android_arm.sh
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;執行完後會在&lt;em&gt;platform&lt;/em&gt;底下出現&lt;em&gt;build_android_arm&lt;/em&gt;的資料夾
要修改資料夾路徑可以在&lt;em&gt;platforms/scripts/cmake_android_arm.sh&lt;/em&gt;裡面修改&lt;/p&gt;
&lt;h2&gt;Make&lt;/h2&gt;
&lt;p&gt;進去&lt;em&gt;build_android_arm&lt;/em&gt;直接make&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd build_android_arm
make -j4
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;NOTE: 這邊我有遇到一個奇怪的error&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/usr/include/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixExponential.h:284:61: error: there are no arguments to &amp;#39;log2&amp;#39; that depend on a template parameter, so a declaration of &amp;#39;log2&amp;#39; must be available [-fpermissive]
    m_squarings = (max)(0, (int)ceil(log2(m_l1norm / maxnorm)));   
......
/usr/include/eigen3/unsupported/Eigen/src/MatrixFunctions/MatrixExponential.h:284:61: error: &amp;#39;log2&amp;#39; was not declared in this scope
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;大致上是找不到log2這個function的意思
仔細看&lt;em&gt;MatrixExponential.h&lt;/em&gt; 發現最前面有log2的宣告&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#ifdef _MSC_VER&lt;/span&gt;
&lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typename&lt;/span&gt; &lt;span class="n"&gt;Scalar&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Scalar&lt;/span&gt; &lt;span class="n"&gt;log2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Scalar&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Scalar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="cp"&gt;#endif&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;看起來是為了補充 Microsoft c+ compiler缺的log2
可能預設ndk用的std lib也沒有log2
為了方便，我這邊就--很dirty--的直接把ifdef那兩行註解掉 : P
直接用這裡寫的log2&lt;/p&gt;
&lt;h2&gt;在java專案裡使用&lt;/h2&gt;
&lt;p&gt;編好之後，原本 opencv android sdk 裡附的 &lt;em&gt;opencv_java3.so&lt;/em&gt; 就在 &lt;em&gt;build_android_arm/lib&lt;/em&gt; 裡
替換掉專案裡的&lt;em&gt;opencv_java3.so&lt;/em&gt;就可以了
(當然，在java層要記得load :P)&lt;/p&gt;
&lt;p&gt;另外也需要把用到的的&lt;em&gt;opencv_contrib&lt;/em&gt; headers放到sdk裡
或是一起放到jni資料夾裡, 自己在Android.mk裡面加include路徑
就可以在jni c++ source裡面用opencv_contrib裡面的東西了~&lt;/p&gt;</content></entry><entry><title>[OpenCV][OCR] Tesseract OCR on OpenCV 3.0</title><link href="/opencvocr-tesseract-ocr-on-opencv-30.html" rel="alternate"></link><published>2015-11-03T09:30:00+08:00</published><updated>2015-11-03T09:30:00+08:00</updated><author><name>Solring Lin</name></author><id>tag:None,2015-11-03:/opencvocr-tesseract-ocr-on-opencv-30.html</id><summary type="html">&lt;p&gt;(archive) [OpenCV][OCR] Tesseract OCR on OpenCV 3.0&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Tesseract on Linux&lt;/h1&gt;
&lt;p&gt;OpenCV 3.0 有整合TesseractOCR的API
但這部份是不在mainline裡面的~ 而是放在&lt;em&gt;opencv_contrib&lt;/em&gt; project的&lt;em&gt;text&lt;/em&gt; module裡
而且text module預設是沒有TesseractOCR的~
以下是enable OpenCV 3.0 Tesseract的步驟 &amp;amp; 使用範例&lt;/p&gt;
&lt;h2&gt;安裝 Leptonica&lt;/h2&gt;
&lt;p&gt;官網: http://www.leptonica.com/
Source: http://www.leptonica.com/download.html&lt;/p&gt;
&lt;p&gt;Tesseract需要Leptonica這個影像處理的library
目前需要1.71以上
如果是Ubuntu 14以下的話，apt-get上的版本太舊，需要自己compile &amp;amp; install&lt;/p&gt;
&lt;h2&gt;安裝 Tesseract Library&lt;/h2&gt;
&lt;p&gt;Git: https://github.com/tesseract-ocr/tesseract
安裝完Leptonica之後
直接照著說明compile並install就可以了&lt;/p&gt;
&lt;h2&gt;OpenCV contrib modules&lt;/h2&gt;
&lt;p&gt;Git:
https://github.com/Itseez/opencv_contrib&lt;/p&gt;
&lt;p&gt;下載 OpenCV 3.0 和 opencv contrib 的source之後(對 兩個都要下載)
照著他的說明使用cmake安裝就OK
如果環境裡漏掉某個module需要的lib，但是你用不到那個module的話，也可以disable那個module跳過編譯
例如要disable dnn module:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cmake -DOPENCV_EXTRA_MODULES_PATH=&amp;lt;opencv_contrib&amp;gt;/modules -DBUILD_opencv_dnn=OFF &amp;lt;opencv_source_directory&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Module list:
https://github.com/Itseez/opencv_contrib/tree/master/modules&lt;/p&gt;
&lt;p&gt;這邊要注意
在下完cmake之後要確定有沒有出現&lt;code&gt;-- Tesseract: YES&lt;/code&gt;的訊息
如果沒有出現表示cmake找不到Tesseract lib，可能是lib安裝位置不正確或是安裝失敗&lt;/p&gt;
&lt;h2&gt;使用Tesseract&lt;/h2&gt;
&lt;p&gt;這裡有相關範例
https://github.com/Itseez/opencv_contrib/blob/master/modules/text/samples/segmented_word_recognition.cpp
https://github.com/Itseez/opencv_contrib/blob/master/modules/text/samples/webcam_demo.cpp&lt;/p&gt;
&lt;p&gt;注意，model的部份還是要自行放在指定的路徑
預設是&lt;code&gt;/usr/local/share/tessdata/&lt;/code&gt;
或是指定env variable &lt;code&gt;TESSDATA_PREFIX&lt;/code&gt;到你存放model的tessdata folder的位置(一定要取名為&lt;code&gt;tessdata&lt;/code&gt;)
(如果是&lt;code&gt;/home/username/tessdata&lt;/code&gt;的話，就要設成&lt;code&gt;/home/username&lt;/code&gt;)
或是在使用API時指定相對路徑&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Ptr&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;OCRTesseract&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ocr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;OCRTesseract&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;/home/test/tessdata&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;//where you store the models&lt;/span&gt;
  &lt;span class="s"&gt;&amp;quot;eng&amp;quot;&lt;/span&gt;
  &lt;span class="s"&gt;&amp;quot;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這裡有些現成的model可以使用
https://github.com/tesseract-ocr/tessdata&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Tesseract package for Android&lt;/h1&gt;
&lt;p&gt;Ref: http://gaut.am/making-an-ocr-android-app-using-tesseract/&lt;/p&gt;
&lt;p&gt;有人將Tessearact本身和他需要的lib打包+作成Android JNI
Tess-two
https://github.com/rmtheis/tess-two&lt;/p&gt;
&lt;h2&gt;使用方法&lt;/h2&gt;
&lt;p&gt;這邊我是在Android Studio的Project使用
因為Android Studio NDK支援還是常常有問題=  ="
所以我是手動ndk-build library&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Import 整個tess-two為一個module
File -&amp;gt; New -&amp;gt; Import module -&amp;gt; 選Tess-two的folder&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Disable auto NDK build
這邊是用NDK-build的plugin，但不使用他的auto build功能 &lt;a href="http://solring-blog.logdown.com/posts/305623-android-to-androidstudio-ndk-plugin-usage"&gt;Ref: 如何安裝NDK plugin&lt;/a&gt;
修改在tess-two module底下會自動產生的&lt;em&gt;build.gradle&lt;/em&gt;:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// 在android括號下加這幾行&lt;/span&gt;
&lt;span class="n"&gt;sourceSets&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;jni&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;srcDirs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="c1"&gt;//disable auto ndk-build&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;NDK build tess-two
方法一樣請參考&lt;a href="http://solring-blog.logdown.com/posts/305623-android-to-androidstudio-ndk-plugin-usage"&gt;這邊&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;把tess-two module加進其他module的dependency裡面
這樣就完成啦~&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Tess-two的詳細使用方法可以參考以下ref:
- Stack Overflow: https://stackoverflow.com/questions/tagged/tess-two
- tesseract-ocr: https://groups.google.com/forum/#!forum/tesseract-ocr&lt;/p&gt;</content></entry><entry><title>[Survey] 文字辨識 Papers</title><link href="/survey-wen-zi-bian-shi-papers.html" rel="alternate"></link><published>2015-10-27T02:19:00+08:00</published><updated>2015-10-27T02:19:00+08:00</updated><author><name>Solring Lin</name></author><id>tag:None,2015-10-27:/survey-wen-zi-bian-shi-papers.html</id><summary type="html">&lt;p&gt;(archive) [Survey] 文字辨識 Papers&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Papers&lt;/h1&gt;
&lt;p&gt;http://2015.icdar.org/program/accepted-papers/&lt;/p&gt;
&lt;h2&gt;Text Segmentation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Profile Projection
http://www.ee.bgu.ac.il/~dinstein/stip2002/Seminar_papers/David_Cahana_A%20character%20segmentation%20method%20using%20projection%20profile-based%20technique.pdf&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CTC
http://www.machinelearning.org/proceedings/icml2006/047_Connectionist_Tempor.pdf&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1&gt;相關比賽&lt;/h1&gt;
&lt;h2&gt;ICDAR&lt;/h2&gt;
&lt;p&gt;http://2015.icdar.org/program/competitions/&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;手機Camera辨識
https://sites.google.com/site/icdar15smartdoc/challenge2/challenge2description&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;手寫辨識
http://transcriptorium.eu/~htrcontest/&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;DRR&lt;/h2&gt;
&lt;p&gt;http://drr2014.irisa.fr/&lt;/p&gt;</content></entry><entry><title>[Android][轉] AndroidStudio NDK plugin使用方法</title><link href="/androidzhuan-androidstudio-ndk-pluginshi-yong-fang-fa.html" rel="alternate"></link><published>2015-10-21T01:16:00+08:00</published><updated>2015-10-21T01:16:00+08:00</updated><author><name>Solring Lin</name></author><id>tag:None,2015-10-21:/androidzhuan-androidstudio-ndk-pluginshi-yong-fang-fa.html</id><summary type="html">&lt;p&gt;(archive) [Android][轉] AndroidStudio NDK plugin使用方法&lt;/p&gt;</summary><content type="html">&lt;p&gt;https://8085studio.wordpress.com/2015/04/25/android-studio-ndk-jni/&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Setting --&amp;gt; Tools --&amp;gt; External tools
    可新增編輯 NDK build 和 Javah，步驟請參考連結&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;新增 NDK Build&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;NDK&lt;/span&gt; &lt;span class="n"&gt;Build&lt;/span&gt;
&lt;span class="n"&gt;Group&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;NDK&lt;/span&gt;
&lt;span class="n"&gt;Description&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;NDK&lt;/span&gt; &lt;span class="n"&gt;Build&lt;/span&gt;
&lt;span class="n"&gt;Options&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;全打勾&lt;/span&gt;
&lt;span class="n"&gt;Show&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;全打勾&lt;/span&gt;
&lt;span class="n"&gt;Tools&lt;/span&gt; &lt;span class="n"&gt;Settings&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;Program&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;NDK目錄ndk&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;cmd&lt;/span&gt;
&lt;span class="n"&gt;Parameters&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;NDK_PROJECT_PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;$ModuleFileDir$&lt;/span&gt;&lt;span class="sr"&gt;/build/intermediates/ndk NDK_LIBS_OUT=$ModuleFileDir$/src/main/jniLibs NDK_APPLICATION_MK=$ModuleFileDir$/src/main/jni/Application.mk APP_BUILD_SCRIPT=$ModuleFileDir$/src/main/jni/&lt;/span&gt;&lt;span class="n"&gt;Android&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;mk&lt;/span&gt; &lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;Working&lt;/span&gt; &lt;span class="n"&gt;directory&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;$SourcepathEntry$&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;Javah&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Javah&lt;/span&gt;
&lt;span class="n"&gt;Group&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;NDK&lt;/span&gt;
&lt;span class="n"&gt;Description&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Javah&lt;/span&gt;
&lt;span class="n"&gt;Options&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;全打勾&lt;/span&gt;
&lt;span class="n"&gt;Show&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;全打勾&lt;/span&gt;
&lt;span class="n"&gt;Tools&lt;/span&gt; &lt;span class="n"&gt;Settings&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;Program&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Java&lt;/span&gt; &lt;span class="n"&gt;JDK目錄binjavah&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;exe&lt;/span&gt;
&lt;span class="n"&gt;Parameters&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;jni&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="n"&gt;$ModuleFileDir$srcmainjni&lt;/span&gt; &lt;span class="n"&gt;$FileClass$&lt;/span&gt;
&lt;span class="n"&gt;Working&lt;/span&gt; &lt;span class="n"&gt;directory&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;$SourcepathEntry$&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;使用javah: 在有native method的class上按右健跑javah&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用NDK build要在&lt;strong&gt;module的jni folder&lt;/strong&gt;上按右鍵跑Ndk build，不是在project folder上&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;disable auto gradle ndk build
在&lt;code&gt;build.gradle&lt;/code&gt;裡的android下加上:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sourceSets{
        main{
            jni.srcDirs = [] //disable auto ndk-build
        }
    }
&lt;/pre&gt;&lt;/div&gt;</content></entry><entry><title>文字辨識相關</title><link href="/wen-zi-bian-shi-xiang-guan.html" rel="alternate"></link><published>2015-10-13T13:34:00+08:00</published><updated>2015-10-13T13:34:00+08:00</updated><author><name>Solring Lin</name></author><id>tag:None,2015-10-13:/wen-zi-bian-shi-xiang-guan.html</id><summary type="html">&lt;p&gt;(archive) 文字辨識相關&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Android 環境設定&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在AndroidStudio上用OpenCV SDK
http://stackoverflow.com/questions/27406303/opencv-in-android-studio&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Download latest OpenCV sdk for Android from OpenCV.org and decompress the zip file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Import OpenCV to Android Studio, From File -&amp;gt; New -&amp;gt; Import Module, choose sdk/java folder in the unzipped opencv archive.&lt;/li&gt;
&lt;li&gt;Update build.gradle under imported OpenCV module to update 4 fields to match your project build.gradle a) compileSdkVersion b) buildToolsVersion c) minSdkVersion and 4) targetSdkVersion.&lt;/li&gt;
&lt;li&gt;Add module dependency by Application -&amp;gt; Module Settings, and select the Dependencies tab. Click + icon at bottom, choose Module Dependency and select the imported OpenCV module.&lt;/li&gt;
&lt;li&gt;For Android Studio v1.2.2, to access to Module Settings : in the project view, right-click the dependent module -&amp;gt; Open Module Settings&lt;/li&gt;
&lt;li&gt;Copy libs folder under sdk/native to Android Studio under app/src/main. In Android Studio, rename the copied libs directory to jniLibs and we are done.
Step (6) is since Android studio expects native libs in app/src/main/jniLibs instead of older libs folder. For those new to Android OpenCV, don't miss below steps&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;include static{ System.loadLibrary(&amp;quot;opencv_java&amp;quot;); } 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(Note: for OpenCV version 3 at this step you should instead load the library opencv_java3.)
For step(5), if you ignore any platform libs like x86, make sure your device/emulator is not on that platform.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Android Camera
http://blog.csdn.net/yanzi1225627/article/details/8605061
http://ibuzzlog.blogspot.tw/2012/08/how-to-do-real-time-image-processing-in.html
https://developer.qualcomm.com/software/snapdragon-sdk-android/facial-processing/user-guide&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;"最后提醒的是，如果程序中加入了previewCallback，在surfaceDestroy释放camera的时候，最好执行myCamera.setOneShotPreviewCallback(null); 或者myCamera.setPreviewCallback(null);中止这种回调，然后再释放camera更安全。"&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Android camera &amp;amp; screen座標
http://blog.csdn.net/yanzi1225627/article/details/38098729&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;OpenCV Text detection&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;MSER
http://www.mathworks.com/help/vision/examples/automatically-detect-and-recognize-text-in-natural-images.html#zmw57dd0e38
https://en.wikipedia.org/wiki/Maximally_stable_extremal_regions
http://www.micc.unifi.it/delbimbo/wp-content/uploads/2011/03/slide_corso/A34%20MSER.pdf&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不錯的中文解釋
http://blog.sciencenet.cn/blog-1327159-849648.html&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Canny Edge Detector
http://docs.opencv.org/doc/tutorials/imgproc/imgtrans/canny_detector/canny_detector.html&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;把camera preview轉Mat, 灰階化
http://www.jayrambhia.com/blog/opencv-android-image/&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Android onPreviewFrame傳回來的data是YUV4:2:0的形式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;OpenCV image rotation
http://opencv-code.com/quick-tips/how-to-rotate-image-in-opencv/&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;YUV to RGB
http://stackoverflow.com/questions/25666120/converting-from-yuv-colour-space-to-rgb-using-opencv
一開始YUV Matrix的size不能亂設，不然轉換的時候會跑掉:P&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;OCR lib&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Tesseract
https://github.com/tesseract-ocr/tesseract&lt;/li&gt;
&lt;/ul&gt;</content></entry><entry><title>[DL] Caffe install on Ubuntu 12.04</title><link href="/dl-caffe-install-on-ubuntu-1204.html" rel="alternate"></link><published>2015-10-13T03:38:00+08:00</published><updated>2015-10-13T03:38:00+08:00</updated><author><name>Solring Lin</name></author><id>tag:None,2015-10-13:/dl-caffe-install-on-ubuntu-1204.html</id><summary type="html">&lt;p&gt;(archive) [DL] Caffe install on Ubuntu 12.04&lt;/p&gt;</summary><content type="html">&lt;p&gt;Ref:
http://www.bubuko.com/infodetail-688569.html&lt;/p&gt;
&lt;h1&gt;安裝dependent package:&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install libprotobuf-dev libleveldb-dev libsnappy-dev libopencv-dev libboost-all-dev libhdf5-serial-dev

&lt;span class="c1"&gt;# glog&lt;/span&gt;
wget https://google-glog.googlecode.com/files/glog-0.3.3.tar.gz
tar zxvf glog-0.3.3.tar.gz
&lt;span class="nb"&gt;cd&lt;/span&gt; glog-0.3.3
./configure
make &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; make install
&lt;span class="c1"&gt;# gflags&lt;/span&gt;
wget https://github.com/schuhschuh/gflags/archive/master.zip
unzip master.zip
&lt;span class="nb"&gt;cd&lt;/span&gt; gflags-master
mkdir build &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; build
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;CXXFLAGS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-fPIC&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; cmake .. &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; make &lt;span class="nv"&gt;VERBOSE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
make &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; make install
&lt;span class="c1"&gt;# lmdb&lt;/span&gt;
wget https://github.com/wizawu/lmdb/archive/lmdb.master.zip
unziplmdb.master.zip
cdlmdb.master/libraries/liblmdb
make &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; make install
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;安裝OpenBLAS&lt;/h1&gt;
&lt;p&gt;參考 https://github.com/xianyi/OpenBLAS/wiki/Installation-Guide&lt;/p&gt;
&lt;p&gt;這邊我選用gfortran當Fortran compiler&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;make FC=gfortran
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;但安裝gfortran之後，一直遇到找不到libgfortran的問題 (-lgfortran失敗)
&lt;strong&gt;解決方法&lt;/strong&gt;: 用 update-alternatives 在/usr/lib/下加libgfortran.so&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;update-alternatives --install /usr/lib/libgfortran.so libgfortran /[path to your libgfortran]/[libgfortran] 1
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;安裝cuda GPU driver&lt;/h1&gt;
&lt;p&gt;不是我裝的XD 先跳過&lt;/p&gt;
&lt;h1&gt;安裝OpenCV&lt;/h1&gt;
&lt;p&gt;這邊我選擇安裝2.4 
因為Ubuntu 12.04太舊了...3.0會出現一堆相容性問題&lt;/p&gt;
&lt;p&gt;直接到這個github下載相對應版本的安裝script，放到要安裝的資料夾run就可以了
https://github.com/jayrambhia/Install-OpenCV/tree/master/Ubuntu/2.4&lt;/p&gt;
&lt;p&gt;另外也有ArchLinux和RedHat的版本&lt;/p&gt;
&lt;h1&gt;編譯caffe&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;NOTE: 以下的問題是發生在同時安裝了 OpenCV 2.4和3.0的機器上&lt;/strong&gt;
可能是link時版本相衝的問題
在另一台只有安裝OpenCV 2.4的 server上就沒有問題&lt;/p&gt;
&lt;p&gt;下載下來後，首先要修改Makefile.config&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;## Refer to http://caffe.berkeleyvision.org/installation.html&lt;/span&gt;
&lt;span class="c1"&gt;# Contributions simplifying and improving our build system are welcome!&lt;/span&gt;

&lt;span class="c1"&gt;# cuDNN acceleration switch (uncomment to build with cuDNN).&lt;/span&gt;
USE_CUDNN :&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;

&lt;span class="c1"&gt;# CPU-only switch (uncomment to build without GPU support).&lt;/span&gt;
&lt;span class="c1"&gt;# CPU_ONLY := 1&lt;/span&gt;

&lt;span class="c1"&gt;# To customize your choice of compiler, uncomment and set the following.&lt;/span&gt;
&lt;span class="c1"&gt;# N.B. the default for Linux is g++ and the default for OSX is clang++&lt;/span&gt;
&lt;span class="c1"&gt;# CUSTOM_CXX := g++&lt;/span&gt;

&lt;span class="c1"&gt;# CUDA directory contains bin/ and lib/ directories that we need.&lt;/span&gt;
CUDA_DIR :&lt;span class="o"&gt;=&lt;/span&gt; /usr/local/cuda
&lt;span class="c1"&gt;# On Ubuntu 14.04, if cuda tools are installed via&lt;/span&gt;
&lt;span class="c1"&gt;# &amp;quot;sudo apt-get install nvidia-cuda-toolkit&amp;quot; then use this instead:&lt;/span&gt;
&lt;span class="c1"&gt;# CUDA_DIR := /usr&lt;/span&gt;

&lt;span class="c1"&gt;# CUDA architecture setting: going with all of them.&lt;/span&gt;
&lt;span class="c1"&gt;# For CUDA &amp;lt; 6.0, comment the *_50 lines for compatibility.&lt;/span&gt;
CUDA_ARCH :&lt;span class="o"&gt;=&lt;/span&gt; -gencode &lt;span class="nv"&gt;arch&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;compute_20,code&lt;span class="o"&gt;=&lt;/span&gt;sm_20 &lt;span class="se"&gt;\&lt;/span&gt;
        -gencode &lt;span class="nv"&gt;arch&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;compute_20,code&lt;span class="o"&gt;=&lt;/span&gt;sm_21 &lt;span class="se"&gt;\&lt;/span&gt;
        -gencode &lt;span class="nv"&gt;arch&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;compute_30,code&lt;span class="o"&gt;=&lt;/span&gt;sm_30 &lt;span class="se"&gt;\&lt;/span&gt;
        -gencode &lt;span class="nv"&gt;arch&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;compute_35,code&lt;span class="o"&gt;=&lt;/span&gt;sm_35 &lt;span class="se"&gt;\&lt;/span&gt;
        -gencode &lt;span class="nv"&gt;arch&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;compute_50,code&lt;span class="o"&gt;=&lt;/span&gt;sm_50 &lt;span class="se"&gt;\&lt;/span&gt;
        -gencode &lt;span class="nv"&gt;arch&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;compute_50,code&lt;span class="o"&gt;=&lt;/span&gt;compute_50

&lt;span class="c1"&gt;# BLAS choice:&lt;/span&gt;
&lt;span class="c1"&gt;# atlas for ATLAS (default)&lt;/span&gt;
&lt;span class="c1"&gt;# mkl for MKL&lt;/span&gt;
&lt;span class="c1"&gt;# open for OpenBlas&lt;/span&gt;
BLAS :&lt;span class="o"&gt;=&lt;/span&gt; open
&lt;span class="c1"&gt;# Custom (MKL/ATLAS/OpenBLAS) include and lib directories.&lt;/span&gt;
&lt;span class="c1"&gt;# Leave commented to accept the defaults for your choice of BLAS&lt;/span&gt;
&lt;span class="c1"&gt;# (which should work)!&lt;/span&gt;
&lt;span class="c1"&gt;# BLAS_INCLUDE := /path/to/your/blas&lt;/span&gt;
&lt;span class="c1"&gt;# BLAS_LIB := /path/to/your/blas&lt;/span&gt;

&lt;span class="c1"&gt;# Homebrew puts openblas in a directory that is not on the standard search path&lt;/span&gt;
&lt;span class="c1"&gt;# BLAS_INCLUDE := $(shell brew --prefix openblas)/include&lt;/span&gt;
&lt;span class="c1"&gt;# BLAS_LIB := $(shell brew --prefix openblas)/lib&lt;/span&gt;

&lt;span class="c1"&gt;# This is required only if you will compile the matlab interface.&lt;/span&gt;
&lt;span class="c1"&gt;# MATLAB directory should contain the mex binary in /bin.&lt;/span&gt;
&lt;span class="c1"&gt;# MATLAB_DIR := /usr/local&lt;/span&gt;
&lt;span class="c1"&gt;# MATLAB_DIR := /Applications/MATLAB_R2012b.app&lt;/span&gt;

&lt;span class="c1"&gt;# NOTE: this is required only if you will compile the python interface.&lt;/span&gt;
&lt;span class="c1"&gt;# We need to be able to find Python.h and numpy/arrayobject.h.&lt;/span&gt;
PYTHON_INCLUDE :&lt;span class="o"&gt;=&lt;/span&gt; /usr/include/python2.7 &lt;span class="se"&gt;\&lt;/span&gt;
        /usr/lib/python2.7/dist-packages/numpy/core/include
&lt;span class="c1"&gt;# Anaconda Python distribution is quite popular. Include path:&lt;/span&gt;
&lt;span class="c1"&gt;# Verify anaconda location, sometimes it&amp;#39;s in root.&lt;/span&gt;
&lt;span class="c1"&gt;# ANACONDA_HOME := $(HOME)/anaconda&lt;/span&gt;
&lt;span class="c1"&gt;# PYTHON_INCLUDE := $(ANACONDA_HOME)/include \&lt;/span&gt;
        &lt;span class="c1"&gt;# $(ANACONDA_HOME)/include/python2.7 \&lt;/span&gt;
        &lt;span class="c1"&gt;# $(ANACONDA_HOME)/lib/python2.7/site-packages/numpy/core/include \&lt;/span&gt;

&lt;span class="c1"&gt;# We need to be able to find libpythonX.X.so or .dylib.&lt;/span&gt;
PYTHON_LIB :&lt;span class="o"&gt;=&lt;/span&gt; /usr/lib
&lt;span class="c1"&gt;# PYTHON_LIB := $(ANACONDA_HOME)/lib&lt;/span&gt;

&lt;span class="c1"&gt;# Homebrew installs numpy in a non standard path (keg only)&lt;/span&gt;
&lt;span class="c1"&gt;# PYTHON_INCLUDE += $(dir $(shell python -c &amp;#39;import numpy.core; print(numpy.core.__file__)&amp;#39;))/include&lt;/span&gt;
&lt;span class="c1"&gt;# PYTHON_LIB += $(shell brew --prefix numpy)/lib&lt;/span&gt;

&lt;span class="c1"&gt;# Uncomment to support layers written in Python (will link against Python libs)&lt;/span&gt;
&lt;span class="c1"&gt;# WITH_PYTHON_LAYER := 1&lt;/span&gt;

&lt;span class="c1"&gt;# Whatever else you find you need goes here.&lt;/span&gt;
INCLUDE_DIRS :&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;PYTHON_INCLUDE&lt;span class="k"&gt;)&lt;/span&gt; /usr/local/include /usr/include/hdf5/serial /usr/local/cuda/cudnn-6.5-linux-x64-v2
LIBRARY_DIRS :&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;PYTHON_LIB&lt;span class="k"&gt;)&lt;/span&gt; /usr/local/lib /usr/lib /usr/lib/x86_64-linux-gnu/hdf5/serial /usr/local/cuda/cudnn-6.5-linux-x64-v2

&lt;span class="c1"&gt;# If Homebrew is installed at a non standard location (for example your home directory) and you use it for general dependencies&lt;/span&gt;
&lt;span class="c1"&gt;# INCLUDE_DIRS += $(shell brew --prefix)/include&lt;/span&gt;
&lt;span class="c1"&gt;# LIBRARY_DIRS += $(shell brew --prefix)/lib&lt;/span&gt;

&lt;span class="c1"&gt;# Uncomment to use `pkg-config` to specify OpenCV library paths.&lt;/span&gt;
&lt;span class="c1"&gt;# (Usually not necessary -- OpenCV libraries are normally installed in one of the above $LIBRARY_DIRS.)&lt;/span&gt;
&lt;span class="c1"&gt;# USE_PKG_CONFIG := 1&lt;/span&gt;

BUILD_DIR :&lt;span class="o"&gt;=&lt;/span&gt; build
DISTRIBUTE_DIR :&lt;span class="o"&gt;=&lt;/span&gt; distribute

&lt;span class="c1"&gt;# Uncomment for debugging. Does not work on OSX due to https://github.com/BVLC/caffe/issues/171&lt;/span&gt;
&lt;span class="c1"&gt;# DEBUG := 1&lt;/span&gt;

&lt;span class="c1"&gt;# The ID of the GPU that &amp;#39;make runtest&amp;#39; will use to run unit tests.&lt;/span&gt;
TEST_GPUID :&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;

&lt;span class="c1"&gt;# enable pretty build (comment to see full commands)&lt;/span&gt;
Q ?&lt;span class="o"&gt;=&lt;/span&gt; @
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其中 &lt;code&gt;CPU_ONLY&lt;/code&gt; &amp;amp; &lt;code&gt;USE_CUDNN&lt;/code&gt; 可以用來控制要不要只使用CPU &amp;amp; 要不要用CUDNN加速&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;有個issue會找不到hdf5.h和他的lib
    把 /usr/include/hdf5/serial 加入 INCLUDE_DIRS
    /usr/lib/x86_64-linux-gnu/hdf5/serial 加入 LIBRARY_DIRS 就可以修好
    如果libhdf5和他的header不是安裝在上述位置的話，可能要找一下並改成你的安裝位置&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果要使用cuDnn的話也要加進他的header file和shared lib路徑
    這裡是&lt;code&gt;/usr/local/cuda/cudnn-6.5-linux-x64-v2&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;另外在compile過程中可能會出現找不到cv::imread和cv::imdecode functions
    解決方法參考 https://github.com/BVLC/caffe/issues/2288
    主要是opencv imgdecode lib沒有被包進來
    修改Makefile，在USE_OPENCL那一段的LIBRARIES加上lib:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;ifeq ($(USE_OPENCV), 1)                                                                    &lt;/span&gt;
  &lt;span class="nv"&gt;LIBRARIES&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; opencv_core opencv_highgui opencv_imgproc opencv_imgcodecs
&lt;span class="cp"&gt;endif  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;另外make&lt;/span&gt; &lt;span class="err"&gt;test的時候也會遇到同樣問題，但這次是因為```-lcaffe```使用到opencv&lt;/span&gt; &lt;span class="err"&gt;imgcodecs等的lib&lt;/span&gt;
&lt;span class="err"&gt;所以應該要放在前面&lt;/span&gt;
&lt;span class="err"&gt;將```TEST_XX_BINS```的&lt;/span&gt; &lt;span class="err"&gt;```-l&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;PROJECT&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="err"&gt;```&lt;/span&gt; &lt;span class="err"&gt;跟&lt;/span&gt; &lt;span class="err"&gt;```&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;LDFLAGS&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="err"&gt;```&lt;/span&gt; &lt;span class="err"&gt;對調即可&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;-o&lt;/span&gt; &lt;span class="k"&gt;$@&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;LINKFLAGS&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="err"&gt;-l&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;PROJECT&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;LDFLAGS&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="err"&gt;-Wl,-rpath,&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;ORIGIN&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="err"&gt;/../lib&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;有關ld link shared library的順序:
http://stackoverflow.com/questions/45135/why-does-the-order-in-which-libraries-are-linked-sometimes-cause-errors-in-gcc&lt;/p&gt;</content></entry><entry><title>[轉] 好用的Linux commands</title><link href="/zhuan-hao-yong-de-linux-commands.html" rel="alternate"></link><published>2015-10-01T23:44:00+08:00</published><updated>2015-10-01T23:44:00+08:00</updated><author><name>Solring Lin</name></author><id>tag:None,2015-10-01:/zhuan-hao-yong-de-linux-commands.html</id><summary type="html">&lt;p&gt;(archive) [轉] 好用的Linux commands&lt;/p&gt;</summary><content type="html">&lt;p&gt;兵器大全(?
http://www.tecmint.com/10-most-dangerous-commands-you-should-never-execute-on-linux/&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;同場加映好用的Linux指令
http://www.tecmint.com/10-most-dangerous-commands-you-should-never-execute-on-linux/&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;sudo !!
自動將上一個指令用sudo執行
當run完一串指令才發現權限不足時很好用lol&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;shuf
shuffle lines&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# ls 
Desktop  Documents  Downloads  Music  Pictures  Public  Templates  Videos
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#  ls | shuf (shuffle Input)
Music 
Documents 
Templates 
Pictures 
Public 
Desktop 
Downloads 
Videos
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;mtr
traceroute + ping
可能需要額外安裝&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ss
socket information&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;tree
印出目前位置的子目錄結構&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;-- Desktop 
&lt;span class="p"&gt;|&lt;/span&gt;-- Documents 
&lt;span class="p"&gt;|&lt;/span&gt;   &lt;span class="sb"&gt;`&lt;/span&gt;-- &lt;span class="m"&gt;37&lt;/span&gt;.odt 
&lt;span class="p"&gt;|&lt;/span&gt;-- Downloads 
&lt;span class="p"&gt;|&lt;/span&gt;   &lt;span class="p"&gt;|&lt;/span&gt;-- attachments.zip 
&lt;span class="p"&gt;|&lt;/span&gt;   &lt;span class="p"&gt;|&lt;/span&gt;-- ttf-indic-fonts_0.5.11_all.deb 
&lt;span class="p"&gt;|&lt;/span&gt;   &lt;span class="p"&gt;|&lt;/span&gt;-- ttf-indic-fonts_1.1_all.deb 
&lt;span class="p"&gt;|&lt;/span&gt;   &lt;span class="sb"&gt;`&lt;/span&gt;-- wheezy-nv-install.sh 
&lt;span class="p"&gt;|&lt;/span&gt;-- Music 
&lt;span class="p"&gt;|&lt;/span&gt;-- Pictures 
&lt;span class="p"&gt;|&lt;/span&gt;   &lt;span class="p"&gt;|&lt;/span&gt;-- Screenshot from &lt;span class="m"&gt;2013&lt;/span&gt;-10-22 &lt;span class="m"&gt;12&lt;/span&gt;:03:49.png 
&lt;span class="p"&gt;|&lt;/span&gt;   &lt;span class="sb"&gt;`&lt;/span&gt;-- Screenshot from &lt;span class="m"&gt;2013&lt;/span&gt;-10-22 &lt;span class="m"&gt;12&lt;/span&gt;:12:38.png 
&lt;span class="p"&gt;|&lt;/span&gt;-- Public 
&lt;span class="p"&gt;|&lt;/span&gt;-- Templates 
&lt;span class="sb"&gt;`&lt;/span&gt;-- Videos 
&lt;span class="m"&gt;10&lt;/span&gt; directories, &lt;span class="m"&gt;23&lt;/span&gt; files
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;pstree
印出目前在跑的process的child process結構
tree版ps&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;^someString^otherString
把上一個指令的某字串換成另一字串
當打了一長串指令發現裡面打錯一小段的時候超好用的!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;file.txt
清空某個文字檔&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;at
超快速排程&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# echo &amp;quot;ls -l &amp;gt; /dev/pts/0&amp;quot; | at 14:012
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;stat file.txt
顯示file資訊
Size, Blocks, Access Permission, Date-time of file last access, Modify, change, etc.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;</content></entry><entry><title>[Android] Android Wear Data API</title><link href="/android-android-wear-data-api.html" rel="alternate"></link><published>2015-10-01T13:04:00+08:00</published><updated>2015-10-01T13:04:00+08:00</updated><author><name>Solring Lin</name></author><id>tag:None,2015-10-01:/android-android-wear-data-api.html</id><summary type="html">&lt;p&gt;(archive) [Android] Android Wear Data API&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;Android Wear Data API&lt;/strong&gt; 可以將app裡的data存入Google Data layer
讓data在wearable和phone之間自動sync、做batch傳輸，或是傳遞一次性資訊和命令
另外還有Channel API 專門用來做streaming，但這邊主要介紹Data API中的&lt;strong&gt;Item API&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;: 只有已安裝&lt;em&gt;Google Mobile Service(GMS)&lt;/em&gt; (有com.google.android.gms這個service)的device才能使用DATA API&lt;/p&gt;
&lt;h1&gt;製作Android wear apk @ Android Studio&lt;/h1&gt;
&lt;p&gt;這邊以Android Studio 1.2.2為例&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;重新建立
File -&amp;gt; New -&amp;gt; New Project -&amp;gt; 輸入project name -&amp;gt; 勾選 "Phone and Tablet" 和 "Wear"
這樣就會自動產生phone和wearable的module
兩邊的app完成之後各自燒到phone和watch上就可以了&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;加入wearable module到現存的Project
Project上按右建 -&amp;gt; New -&amp;gt; Module -&amp;gt; Andorid Wear Module -&amp;gt; 輸入package name和module name
&lt;strong&gt;重要&lt;/strong&gt; 這邊package name要和原本phone的module完全一樣
這樣在使用Data API的時候，phone和watch兩邊的才能看到彼此的data&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;使用Data Item API&lt;/h1&gt;
&lt;h2&gt;建立GMS Client&lt;/h2&gt;
&lt;p&gt;在Activity或Service裡註冊GMC client&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="c1"&gt;//Build GMS client&lt;/span&gt;
 &lt;span class="n"&gt;GoogleApiClient&lt;/span&gt; &lt;span class="n"&gt;gclient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;GoogleApiClient&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Builder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mContext&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
     &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addConnectionCallbacks&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
     &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addOnConnectionFailedListener&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
     &lt;span class="c1"&gt;// Request access only to the Wearable API&lt;/span&gt;
     &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addApi&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Wearable&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;API&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
     &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;連接到GMS&lt;/h2&gt;
&lt;p&gt;需要實做 &lt;code&gt;GoogleApiClient.ConnectionCallbacks, GoogleApiClient.OnConnectionFailedListener&lt;/code&gt; interface
並呼叫&lt;code&gt;gclient.connect()&lt;/code&gt;
要斷開連線則呼叫&lt;code&gt;gclient.disconnect()&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;將data放到Google Data Layer&lt;/h2&gt;
&lt;p&gt;每筆data是用key, value的形式存在Data map中
而每個Data map又可以有專屬的url，url可以用來表示目錄結構
這些Data map只有同一個package下的components才看的到&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;//建立put request&lt;/span&gt;
&lt;span class="n"&gt;PutDataMapRequest&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PutDataMapRequest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;create&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/my-heartrate&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// get data map並insert key/value&lt;/span&gt;
&lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getDataMap&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;putInt&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HEARTRATE_KEY&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hr&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;PutDataRequest&lt;/span&gt; &lt;span class="n"&gt;putDataReq&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;asPutDataRequest&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;PendingResult&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;DataApi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;DataItemResult&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pendingResult&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="n"&gt;Wearable&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;DataApi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;putDataItem&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gclient&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;putDataReq&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;pendingResult&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setResultCallback&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ResultCallback&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;DataApi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;DataItemResult&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;onResult&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DataApi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;DataItemResult&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getStatus&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;isSuccess&lt;/span&gt;&lt;span class="o"&gt;()){&lt;/span&gt;
          &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;d&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TAG&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;data item set &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getDataItem&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;getUri&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;拿取Data layer的Data&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;//建立URI&lt;/span&gt;
&lt;span class="n"&gt;Uri&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Builder&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Uri&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Builder&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;scheme&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;wear&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;                     &lt;span class="c1"&gt;//這裡是指定要拿wearable device的資料&lt;/span&gt;
&lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/my-heartrate&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;      &lt;span class="c1"&gt;//之前指定的uri字串&lt;/span&gt;
&lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;d&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TAG&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;query url: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;toString&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;

&lt;span class="n"&gt;PendingResult&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;DataItemBuffer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pendingResult&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Wearable&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;DataApi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getDataItems&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gclient&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
&lt;span class="n"&gt;pendingResult&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setResultCallback&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ResultCallback&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;DataItemBuffer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;onResult&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DataItemBuffer&lt;/span&gt; &lt;span class="n"&gt;dataItems&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;d&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TAG&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;get Data Items&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DataItem&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;dataItems&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
            &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;d&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TAG&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;data path: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getUri&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;getPath&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
            &lt;span class="n"&gt;DataMap&lt;/span&gt; &lt;span class="n"&gt;dataMap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DataMapItem&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;fromDataItem&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;getDataMap&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
            &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;hr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dataMap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getInt&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HEARTRATE_KEY&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;d&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TAG&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;data value:&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;hr&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;updateCount&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hr&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;  
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;註冊listener&lt;/h2&gt;
&lt;p&gt;implement &lt;code&gt;DataApi.DataListener&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;onDataChanged&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DataEventBuffer&lt;/span&gt; &lt;span class="n"&gt;dataEvents&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;d&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TAG&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;onDataChanged&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DataEvent&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;dataEvents&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getType&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;DataEvent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;TYPE_CHANGED&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;// DataItem changed&lt;/span&gt;
                &lt;span class="n"&gt;DataItem&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getDataItem&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getUri&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;getPath&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;contains&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;URI&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;DataMap&lt;/span&gt; &lt;span class="n"&gt;dataMap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DataMapItem&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;fromDataItem&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;getDataMap&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
                    &lt;span class="n"&gt;updateCount&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dataMap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getInt&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HEARTRATE_KEY&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
                &lt;span class="o"&gt;}&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getType&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;DataEvent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;TYPE_DELETED&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;// DataItem deleted&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content></entry><entry><title>[Linux] Ubuntu 12.04.5 install g++-4.8 up</title><link href="/linux-ubuntu-12045-install-g-48-up.html" rel="alternate"></link><published>2015-10-01T09:30:00+08:00</published><updated>2015-10-01T09:30:00+08:00</updated><author><name>Solring Lin</name></author><id>tag:None,2015-10-01:/linux-ubuntu-12045-install-g-48-up.html</id><summary type="html">&lt;p&gt;(archive) [Linux] Ubuntu 12.04.5 install g++-4.8 up&lt;/p&gt;</summary><content type="html">&lt;p&gt;筆記一下~
Ubuntu 12.04.5要update g++的話要額外加ppa&lt;/p&gt;
&lt;p&gt;而且12.04預設是沒有add-apt-repository的 (很神秘...
要先安裝python-software-properties&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install python-software-properties
sudo add-apt-repository ppa:ubuntu-toolchain-r/test
sudo apt-get update
sudo apt-get install g++-4.8
sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.8 &lt;span class="m"&gt;50&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ref:
http://askubuntu.com/questions/271388/how-to-install-gcc-4-8&lt;/p&gt;</content></entry><entry><title>[DL] 實做</title><link href="/dl-shi-zuo.html" rel="alternate"></link><published>2015-10-01T01:49:00+08:00</published><updated>2015-10-01T01:49:00+08:00</updated><author><name>Solring Lin</name></author><id>tag:None,2015-10-01:/dl-shi-zuo.html</id><summary type="html">&lt;p&gt;(archive) [DL] 實做&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Facescrub&lt;/h1&gt;
&lt;p&gt;名人的臉
但是只有uri沒有圖片本身
還有臉的位置(框)
抓出來很多是垃圾or找不到(汗&lt;/p&gt;
&lt;h1&gt;Caffe&lt;/h1&gt;
&lt;p&gt;DL framework
Pure C++, 有python binding
可以自動switch CPU GPU&lt;/p&gt;
&lt;p&gt;CAFFE.prototxt --&amp;gt; config檔
kernel size: filter的範圍
num_output: 幾個filter&lt;/p&gt;
&lt;p&gt;Training setting:
要有正反例
分training set和test set&lt;/p&gt;
&lt;p&gt;Test prototext&lt;/p&gt;
&lt;p&gt;Training solver:
每次iteration負責矯正參數的
learing rate: gradient decent的幅度  &lt;/p&gt;
&lt;h1&gt;cuDNN&lt;/h1&gt;
&lt;p&gt;Tensor描述data input的排列&lt;/p&gt;</content></entry><entry><title>[DL] Convolutional Neural Network</title><link href="/dl-convolutional-neural-network.html" rel="alternate"></link><published>2015-09-30T12:09:00+08:00</published><updated>2015-09-30T12:09:00+08:00</updated><author><name>Solring Lin</name></author><id>tag:None,2015-09-30:/dl-convolutional-neural-network.html</id><summary type="html">&lt;p&gt;(archive) [DL] Convolutional Neural Network&lt;/p&gt;</summary><content type="html">&lt;p&gt;感想: 這東西真的是玄學啊~~~~~~&lt;/p&gt;
&lt;p&gt;ref: 
http://www.iro.umontreal.ca/~pift6266/H10/notes/deepintro.html
http://deeplearning.net/tutorial/lenet.html&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Background of Neural Network&lt;/h1&gt;
&lt;p&gt;就是嘗試模擬神經元的方式去辨識物體
每個神經元指會對特定的signal(feature)做出反應，傳給其他神經元，最後有個high level的結果&lt;/p&gt;
&lt;p&gt;那要怎麼知道，為了辨識出東西(貓or早餐or樓下鄰居)，哪個神經元應該對哪個訊號有反應呢? 
A: &lt;strong&gt;用Train的&lt;/strong&gt;
這就是ML裡面 feature learning/Representation learning 的部份&lt;/p&gt;
&lt;p&gt;在NN中，某neuron h會對其他neuron or input x做反應
至於反應要多大呢? 就由 &lt;code&gt;Weight(w)&lt;/code&gt; + &lt;code&gt;Bias(b)&lt;/code&gt; + &lt;code&gt;linear function&lt;/code&gt;決定
也可以說，neuron的 Weight(w)+Bias(b)決定了他會對哪個feature有反應
&lt;strong&gt;要Train的部份就是對每個input的Weight(w)+Bias(b)&lt;/strong&gt;&lt;/p&gt;
&lt;h1&gt;Convolutional Neural Network (CNN)&lt;/h1&gt;
&lt;p&gt;傳統fully-connected的Neural network如果套在影像辨識上
就會發生很恐怖的事情:
假設有40000個Neuron 對上 200w像素的影像
每個pixel都會有一個對應的 w 和 b
就有40000 x 200w x 2 個參數要train
........Overhead實在是很大&lt;/p&gt;
&lt;p&gt;所以CNN就發想出幾個idea:&lt;/p&gt;
&lt;h2&gt;Locally connected (Sparse Connectivity)&lt;/h2&gt;
&lt;p&gt;模擬visual cortex的行為
每個視覺neuron一次只能對某塊sub-region&lt;code&gt;receptive field&lt;/code&gt;做反應
&lt;strong&gt;作用就像是某個feature的filter&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;所以CNN中不需要整張圖片的pixel都connect到某個neuron上
一個neuron的input可能只是圖片上的某個區域&lt;code&gt;field&lt;/code&gt;
他所對應的&lt;strong&gt;參數數量就減少到該field的pixel數量&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;Multilayer Neural Network&lt;/h2&gt;
&lt;p&gt;一樣也是模擬visual cortex，就是neuron有很多層&lt;code&gt;layer&lt;/code&gt;囉
在CNN裡，同一層的neuron之間是沒有link的 
兩個layer可以形成一個&lt;a href="https://en.wikipedia.org/wiki/Restricted_Boltzmann_machine"&gt;Restricted Boltzmann machine&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Shared Weight&lt;/h2&gt;
&lt;p&gt;(這個名詞我覺得很難反應原理 :P)
指的是&lt;strong&gt;input不同位置的neuron的weight可以是相同的&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;接續receptive field的概念
因為neuron只能filter某個sub-region
如果希望在整張照片找feature，就必須用這個filter一次只掃一部份，掃過整張圖片
具體的方法就是將這個filter(neuron)重複apply到所有區域
因為&lt;strong&gt;決定filter特性的是W和B&lt;/strong&gt;
所以&lt;strong&gt;將filter重複apply的方法就是讓多個neuron使用同樣的W和B&lt;/strong&gt; (Shared weight就是從這邊來的)
這些apply相同filter的neuron output組成的就是&lt;code&gt;feature map&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Filter bank就是weight和bias, Feature map是用某個filter的neuron的集合" src="http://user-image.logdown.io/user/13673/blog/12890/post/302641/V21DnAAeTKiOirZRFKhT_dl2.png"&gt;
Filter bank就是weight和bias, Feature map是用某個filter的neuron的集合&lt;/p&gt;
&lt;h2&gt;Multiple Convolutions&lt;/h2&gt;
&lt;p&gt;在某layer的neuron的來源可以是多張上一layer的feature map
物理意義應該是表示&lt;strong&gt;這個feature是由多個上一層的feature組成的&lt;/strong&gt;
所以越低layer的feature通常是線段之類的primitive element
而越高layer的則是越high level的feature (e.g. 眼睛)&lt;/p&gt;
&lt;p&gt;&lt;img alt="Sample convolutional layer" src="http://deeplearning.net/tutorial/_images/cnn_explained.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="low layer features" src="http://user-image.logdown.io/user/13673/blog/12890/post/302641/DsAYpgsTH63BTPVm8q6g_dl-filters1.png"&gt;
Low layer features&lt;/p&gt;
&lt;p&gt;&lt;img alt="high layer features" src="http://user-image.logdown.io/user/13673/blog/12890/post/302641/aaOb1565R8a5f4RSYxLj_dl-filters2.png"&gt;
High layer features&lt;/p&gt;
&lt;h2&gt;Pooling, Subsampling&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Pooling: 
幾個pixel取平均變成新的pixel
有smoothing的功能?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Subsampling: 
Pooling時跳著做
本來可能是每shift一個pixel做一次，變成shift兩格才做
可以降低維度(資料量)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;Backpropogation (backward propagation)&lt;/h1&gt;
&lt;p&gt;先定義一個loss function (W, B as variables)
然後用opt. function(e.g. gradient decent)找loss function的最小值&lt;/p&gt;
&lt;h2&gt;Gradiend decent&lt;/h2&gt;
&lt;p&gt;https://zh.wikipedia.org/wiki/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95
從某一點開始逼近最小值時，因為梯度相當於斜率，所以沿著梯度下降是最快的&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;\mathbf{x}_{n+1}=\mathbf{x}_n-\gamma_n \nabla F(\mathbf{x}_n),\ n \ge 0.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;一直逼近到&lt;code&gt;$ \mathbf{x} $&lt;/code&gt;為最小為止&lt;/p&gt;
&lt;p&gt;如果到套用到CNN某一層neuron的話就像是&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(\mathbf{W},\mathbf{B})_{n+1}=(\mathbf{W},\mathbf{B})_n-\gamma_n \nabla F(\mathbf{W}_n, \mathbf{B}_n),\ n \ge 0.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;//Notation應該是不太對XD 之後再改
其中function &lt;code&gt;$ F(\mathbf{W}_n, \mathbf{B}_n) $&lt;/code&gt;是loss function
loss function要可微分，才能算梯度
連帶也表示不同層的activation function也要可以微分&lt;/p&gt;
&lt;p&gt;令某一層的activation function &lt;code&gt;$ a(X) $&lt;/code&gt;
帶入一個train input X得到的答案是y
改把W, B看成變數的話就是 &lt;code&gt;$ A(W, B)=y $&lt;/code&gt;
假設正確答案是y'
Loss function &lt;code&gt;$ F(W, B)=y'-y=y'-A(W, B) $&lt;/code&gt;
因此更新W, B的方法就是算出&lt;code&gt;$ y'-A(W, B) $&lt;/code&gt;梯度之後，乘一個比率減回去&lt;/p&gt;</content></entry><entry><title>[Java] JNI referece lifetime</title><link href="/java-jni-referece-lifetime.html" rel="alternate"></link><published>2015-09-30T02:40:00+08:00</published><updated>2015-09-30T02:40:00+08:00</updated><author><name>Solring Lin</name></author><id>tag:None,2015-09-30:/java-jni-referece-lifetime.html</id><summary type="html">&lt;p&gt;(archive) [Java] JNI referece lifetime&lt;/p&gt;</summary><content type="html">&lt;p&gt;https://www3.ntu.edu.sg/home/ehchua/programming/java/JavaNativeInterface.html
http://docs.oracle.com/javase/7/docs/technotes/guides/jni/spec/types.html&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;A local reference is created within the native method, and freed once the method exits. It is valid for the duration of a native method. You can also use JNI function DeleteLocalRef() to invalidate a local reference explicitly, so that it is available for garbage collection intermediately. 
    所以實際上的回收還是由GC負責。先被free的reference比較可能先被回收&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Objects are passed to native methods as local references. All Java objects (jobject) returned by JNI functions are local references.
    所以如果還要在別的native function裡使用這個reference要再另外建Global ref&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A global reference remains until it is explicitly freed by the programmer, via the DeleteGlobalRef() JNI function. You can create a new global reference from a local reference via JNI function NewGlobalRef().&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reference type (jobject): jclass, jmethodID, jfieldID, jarray, jexception, jstring&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content></entry><entry><title>[Linux] Linux page cache</title><link href="/linux-linux-page-cache.html" rel="alternate"></link><published>2015-09-15T08:50:00+08:00</published><updated>2015-09-15T08:50:00+08:00</updated><author><name>Solring Lin</name></author><id>tag:None,2015-09-15:/linux-linux-page-cache.html</id><summary type="html">&lt;p&gt;(archive) [Linux] Linux page cache&lt;/p&gt;</summary><content type="html">&lt;p&gt;Reference:
http://www.westnet.com/~gsmith/content/linux-pdflush.htm&lt;/p&gt;
&lt;h1&gt;怎麼看Page cache使用情況?&lt;/h1&gt;
&lt;p&gt;從procsys查看: &lt;code&gt;/proc/meminfo&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;MemTotal&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;        &lt;span class="mi"&gt;3041412&lt;/span&gt; &lt;span class="n"&gt;kB&lt;/span&gt;
&lt;span class="n"&gt;MemFree&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;          &lt;span class="mi"&gt;202200&lt;/span&gt; &lt;span class="n"&gt;kB&lt;/span&gt;
&lt;span class="n"&gt;Buffers&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;          &lt;span class="mi"&gt;137432&lt;/span&gt; &lt;span class="n"&gt;kB&lt;/span&gt;
&lt;span class="n"&gt;Cached&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;          &lt;span class="mi"&gt;1466296&lt;/span&gt; &lt;span class="n"&gt;kB&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;Dirty&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;                 &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="n"&gt;kB&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其中Cached就是現在Page cached的大小
Dirty就是被write的部份，如果Dirty pages被寫回去的話就會歸零&lt;/p&gt;
&lt;h1&gt;Page cache相關參數&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;/proc/sys/vm/dirty_writeback_centisecs&lt;/code&gt;
(0.01 second) 每隔多久pdflush會起來把expire的dirty page寫回去
預設500 (5 seconds)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;/proc/sys/vm/dirty_expire_centiseconds&lt;/code&gt;
(0.01 second) Dirty page expire的期限
預設3000 (30 seconds)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;/proc/sys/vm/dirty_background_ratio&lt;/code&gt;
當Dirty page的大小超過"目前可用的RAM"幾percent會強制把dirty page寫回去
其中"目前可用的RAM" = MemFree + Cached - Mapped&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;dirty_writeback_centisecs&lt;/code&gt;
據說太複雜了 被disable?&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content></entry><entry><title>[Linux] cpuidle menu driver &amp; I/O latency predict driver</title><link href="/linux-cpuidle-menu-driver-io-latency-predict-driver.html" rel="alternate"></link><published>2015-09-15T05:47:00+08:00</published><updated>2015-09-15T05:47:00+08:00</updated><author><name>Solring Lin</name></author><id>tag:None,2015-09-15:/linux-cpuidle-menu-driver-io-latency-predict-driver.html</id><summary type="html">&lt;p&gt;(archive) [Linux] cpuidle menu driver &amp;amp; I/O latency predict driver&lt;/p&gt;</summary><content type="html">&lt;h1&gt;CPU idle driver&lt;/h1&gt;
&lt;p&gt;基本上是利用各種數據去預測接下來的cpu idle時間，以選擇適當的CPU idle state
CPU idle的state數量，idle時電流，switch時間都可以拿來衡量&lt;/p&gt;
&lt;h1&gt;為何不能想睡就睡?&lt;/h1&gt;
&lt;p&gt;既然idle state很省電，為何不能逮到機會就想辦法進idle睡呢?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Switch overhead
跟據關掉的東西的數量程度，每個idle等級要進入和出來的時間都不一樣
睡的越沉，醒的越慢
要是一直睡睡醒醒，反而會多花時間又耗電&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;系統目前不容忍睡太死
跟Linux PM Framework有關
有時候系統會需要很即時的反應(e.g. DMA)，這個時候也不能睡太死&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;Menu driver&lt;/h1&gt;
&lt;p&gt;Reference: 
http://www.wowotech.net/pm_subsystem/cpuidle_menu_governor.html
http://lxr.free-electrons.com/source/drivers/cpuidle/governors/menu.c&lt;/p&gt;
&lt;h2&gt;menu&lt;/h2&gt;
&lt;p&gt;目前普遍的cpuidle driver
&lt;strong&gt;超級簡化&lt;/strong&gt;來說，就是在系統允許的idle時間以內
用目前已知的&lt;strong&gt;下一次timer距離、上次實際的idle時間、i/o task queue長度、i/o種類、cpu loading&lt;/strong&gt;來估計適合的idle時間 &amp;amp; 
另外也有偵測periodic event的機制
但基本精神是: 用上一次實際idle時間慢慢修正factor，乘上已知的下次timer時間&lt;/p&gt;
&lt;h3&gt;menu_select&lt;/h3&gt;
&lt;p&gt;主要選擇idle state的function&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Steps&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Call &lt;code&gt;pm_qos_request&lt;/code&gt; 得到CPU和DMA可接受的delay(latency_req)&lt;/li&gt;
&lt;li&gt;Call &lt;code&gt;menu_update&lt;/code&gt;，用&lt;strong&gt;上一次實際idle的時間&lt;/strong&gt;更正上一次使用的factor&lt;/li&gt;
&lt;li&gt;取得nohz下預計的sleep時間&lt;code&gt;next_timer_us&lt;/code&gt; &amp;amp; 目前在I/O wait queue的task數量&lt;code&gt;iowaiters&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;用3的結果來取得factor
    Governor會根據next_timer_us和有沒有iowaiters來個別maintain不同的factor，共有12個&lt;/li&gt;
&lt;li&gt;計算預計的idle時間&lt;code&gt;predicted_us&lt;/code&gt;: &lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;predicted_us&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DIV_ROUND_CLOSEST_ULL&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="kt"&gt;uint64_t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next_timer_us&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
                                        &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;correction_factor&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;bucket&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                                        &lt;span class="n"&gt;RESOLUTION&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;DECAY&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;用5的結果和iowaiters和cpuload，算出另一個最大可接受delay
    &lt;code&gt;predicted_us / (1 + 2 * loadavg +10 * iowaiters)&lt;/code&gt;
  和1算的取min值
  基本精神是&lt;strong&gt;越忙越不能delay&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用估計出來的idle時間(predicted_us)和可接受的delay(latency_req)選擇適合的idle state&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CPUIDLE_DRIVER_STATE_START&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;drv&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;state_count&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                 &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;cpuidle_state&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;drv&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;states&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                 &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;cpuidle_state_usage&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;su&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;states_usage&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

                 &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;disabled&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;su&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;disable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                         &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                 &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;target_residency&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;predicted_us&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                         &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                 &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;exit_latency&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;latency_req&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                         &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                 &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;last_state_idx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
         &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;menu_update&lt;/h3&gt;
&lt;p&gt;跟據上一次實際idle的時間 update上一次使用的factor
大至上是: factor = old_factor * ( 實際 / 預計下一次 idle timer)&lt;/p&gt;
&lt;p&gt;選擇factor是根據&lt;strong&gt;預計idle時間的長短&lt;/strong&gt;和&lt;strong&gt;有沒有io waiting的task&lt;/strong&gt;決定
因為&lt;strong&gt;不同預計時間對factor的反應程度&lt;/strong&gt;不同
初始預計時間越長，factor對實際值的影響就越大(base比較大嘛)
對長預計時間剛好的factor，用在短預計時間上可能就會矯正過度
所以某範圍的預計時間會被分到同個&lt;strong&gt;bucket&lt;/strong&gt;，共用同個factor
有io wait task的話就會加權，分到比較長的預計時間bucket&lt;/p&gt;
&lt;p&gt;目前是用指數分法 10^(n-1) ~ 10^n 已內的為一個bucket
有io waiter的話 n += 6&lt;/p&gt;
&lt;h2&gt;I/O tracker cpuidle driver&lt;/h2&gt;
&lt;p&gt;Ref: 
http://events.linuxfoundation.org/sites/events/files/slides/IOlatencyPrediction.pdf&lt;/p&gt;
&lt;h3&gt;Problem of menu driver&lt;/h3&gt;
&lt;p&gt;基本上Menu driver用已知的time來預測下一次的itle時間
並用之前實際因為其他interrupt而提早的idle時間來調整
........算是非常簡單的learning
而且是建立在&lt;strong&gt;一段時間內的interrupt數量間隔差不多&lt;/strong&gt;的前提下
這樣的作法有幾個問題:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;把所有的interrupt都一起算，混在一起可能會將原本有period的interrupt忽略or算錯period&lt;/li&gt;
&lt;li&gt;需要時間收斂&lt;/li&gt;
&lt;li&gt;如果換CPU的話，收斂過程要重來&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;I/O Tracking cpu driver&lt;/h3&gt;
&lt;p&gt;因此Lenaro PM team的人就提出 &lt;strong&gt;預測I/O idle time&lt;/strong&gt;的想法，因為:
- I/O時間(e.g. HD, Flash)是固定or非常接近的
    例如固定block size W/R的I/O wait time是差不多的
- 一口氣read/write大量data時，就會是一連串類似的I/O time or 有重複的pattern
- CPU migration也沒有關係，因為是根據I/O time算的&lt;/p&gt;
&lt;p&gt;&lt;img alt="ssd-iotime.png" src="http://user-image.logdown.io/user/13673/blog/12890/post/300400/9ayfcScLQcGZnYaQCxOi_ssd-iotime.png"&gt;&lt;/p&gt;
&lt;h3&gt;Implement&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;對每個Task，紀錄被I/O block的時間&lt;/li&gt;
&lt;li&gt;將I/O block時間分成好幾個區間(bucket)，統計次數&lt;/li&gt;
&lt;li&gt;將bucket跟據現在距上次hit的時間排序&lt;/li&gt;
&lt;li&gt;估計下次I/O block time &lt;code&gt;next_io_event&lt;/code&gt;時，就取距離最近越常發生的(?
&lt;code&gt;Score = nrhits / (pos + 1)²&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="IOTrackingCPUIdle.png" src="http://user-image.logdown.io/user/13673/blog/12890/post/300400/sPFcKASwQWKDLZiXq1QB_IOTrackingCPUIdle.png"&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果有多個task在wait，取最小的估計時間&lt;/li&gt;
&lt;li&gt;一樣從timer system取得&lt;code&gt;next_timer_event&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;預計&lt;strong&gt;idle time = min(next_timer_event, next_io_event)&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;跟據他的實驗結果，這樣猜測的準卻度可以比menu driver好上很多
而且這樣的設計可以和schedule綁在一起(在要進idle or I/O queue時做預測)&lt;br&gt;
以後也可以做更準確的預測(e.g. predict I/O time per hardware device)&lt;/p&gt;</content></entry><entry><title>[GIS] Leaflet+GIS tools~</title><link href="/gis-leafletgis-tools.html" rel="alternate"></link><published>2015-09-03T12:28:00+08:00</published><updated>2015-09-03T12:28:00+08:00</updated><author><name>Solring Lin</name></author><id>tag:None,2015-09-03:/gis-leafletgis-tools.html</id><summary type="html">&lt;p&gt;(archive) [GIS] Leaflet+GIS tools~&lt;/p&gt;</summary><content type="html">&lt;h1&gt;GIS Tools&lt;/h1&gt;
&lt;h2&gt;經緯度及坐標系統&lt;/h2&gt;
&lt;p&gt;二度分帶坐標 TWD97
http://www.sunriver.com.tw/grid_tm2.htm&lt;/p&gt;
&lt;p&gt;EPSG
收錄訂定各種投影坐標系統的組織&lt;/p&gt;
&lt;p&gt;某人整理的心得
http://vinn.logdown.com/posts/2014/03/11/note-3-overview-of-openlayers-map-projection&lt;/p&gt;
&lt;h2&gt;Leaflet&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://ogre.adc4gis.com/"&gt;http://leafletjs.com/examples/quick-start.html&lt;/a&gt;
繪製GIS
可吃圖磚, GeoJSON&lt;/p&gt;
&lt;p&gt;A simple example&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Leaflet test&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;stylesheet&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;text/css&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://cdn.leafletjs.com/leaflet-0.7/leaflet.css&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://cdn.leafletjs.com/leaflet-0.7/leaflet.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;map&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;height:300px; width:600px;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;This is a test map&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;map&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;L&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;map&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;setView&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mf"&gt;25.032961&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;121.562655&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;mapLink&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;OpenStreetMap&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;L&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tileLayer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;attribution&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Map data &amp;amp;copy; &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;mapLink&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nx"&gt;maxZoom&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;addTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Reference
https://leanpub.com/leaflet-tips-and-tricks/read#leanpub-auto-html-1&lt;/p&gt;
&lt;h2&gt;Shapefile轉GeoJSON&lt;/h2&gt;
&lt;p&gt;org2org lib
&lt;a href="http://www.gdal.org/ogr2ogr.html"&gt;http://www.gdal.org/ogr2ogr.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;org2org online tool
&lt;a href="http://ogre.adc4gis.com/"&gt;http://ogre.adc4gis.com/&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Tile services&lt;/h1&gt;
&lt;p&gt;中研院WMTS
&lt;a href="http://gis.sinica.edu.tw/tileserver/"&gt;http://gis.sinica.edu.tw/tileserver/&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Other tools&lt;/h1&gt;
&lt;h2&gt;JS test tool&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://jsfiddle.net/"&gt;https://jsfiddle.net/&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Turf.js&lt;/h2&gt;
&lt;p&gt;對GeoJSON做運算 output也是GeoJSON 沒有畫圖功能
&lt;a href="http://turfjs.org/"&gt;http://turfjs.org/&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Google map styler&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://www.mapstylr.com/"&gt;http://www.mapstylr.com/&lt;/a&gt;
可以修改顯示的圖層，顏色，線段寬度等資訊
最後會產生一個json file，可餵給Google map API or leaflet GMAP plugin&lt;/p&gt;</content><category term="[GIS"></category><category term="front-end]"></category></entry><entry><title>[Android][Tool] Butter Knife</title><link href="/androidtool-butter-knife.html" rel="alternate"></link><published>2015-08-07T04:34:00+08:00</published><updated>2015-08-07T04:34:00+08:00</updated><author><name>Solring Lin</name></author><id>tag:None,2015-08-07:/androidtool-butter-knife.html</id><summary type="html">&lt;p&gt;(archive) [Android][Tool] Butter Knife&lt;/p&gt;</summary><content type="html">&lt;p&gt;終於不用在findViewById和type casting啦~
還有listener binder
先記錄一下&lt;/p&gt;
&lt;p&gt;http://jakewharton.github.io/butterknife/&lt;/p&gt;</content><category term="[android]"></category></entry><entry><title>[Android] 解決setsockopt在multicast的問題</title><link href="/android-jie-jue-setsockoptzai-multicastde-wen-ti.html" rel="alternate"></link><published>2015-07-31T11:14:00+08:00</published><updated>2015-07-31T11:14:00+08:00</updated><author><name>Solring Lin</name></author><id>tag:None,2015-07-31:/android-jie-jue-setsockoptzai-multicastde-wen-ti.html</id><summary type="html">&lt;p&gt;(archive) [Android] 解決setsockopt在multicast的問題&lt;/p&gt;</summary><content type="html">&lt;p&gt;參考以下這一篇
http://developerweb.net/viewtopic.php?id=5784&lt;/p&gt;
&lt;p&gt;原因是Android開Wi-Fi AP Mode之後
系統把routing table寫死成只有內網(192.168.xx)才有route
因為目前預設的multicast IP是寫死成224.0.1.187&lt;/p&gt;
&lt;p&gt;setsocketopt找不到route就失敗了&lt;/p&gt;
&lt;p&gt;Work around:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;route add -net 224.0.0.0 netmask 224.0.0.0 dev ap0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;查看有沒有加成功&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat /proc/net/route
&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;
&lt;p&gt;後來有在AOSP上發現相關issue，但是目前被放置中...
http://code.google.com/p/android/issues/detail?id=40003&lt;/p&gt;</content><category term="[android]"></category></entry><entry><title>Sony Smartwatch 3 Root Instructions</title><link href="/sony-smartwatch-3-root-instructions.html" rel="alternate"></link><published>2015-07-31T10:58:00+08:00</published><updated>2015-07-31T10:58:00+08:00</updated><author><name>Solring Lin</name></author><id>tag:None,2015-07-31:/sony-smartwatch-3-root-instructions.html</id><summary type="html">&lt;p&gt;(archive) Sony Smartwatch 3 Root Instructions&lt;/p&gt;</summary><content type="html">&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;安裝driver&lt;/strong&gt;
    用Sony的PC Companion裡的driver
    如果有問題的話也可以改用Google的USB driver
    但是要手動加smartwatch 3 SWR50進支援清單
    到Google USB driver的目錄下修改 &lt;em&gt;androidwinusb.inf&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;; Sony Smartwatch 3 SWR50 ADB interface
%SonyFastbootInterface%    = USB_Install, USB\VID_0FCE&amp;amp;PID_0DDE
%SonyFastbootInterface%    = USB_Install, USB\VID_0FCE&amp;amp;PID_0DDE&amp;amp;REV_0001
%SonySmartwatch3ADBInterface%  = USB_Install, USB\VID_0FCE&amp;amp;PID_A1BD
%SonySmartwatch3ADBInterface%  = USB_Install, USB\VID_0FCE&amp;amp;PID_A1BD&amp;amp;REV_0100
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;後面的ID用裝置管理員查device hardware ID就查的到了
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;連接裝置到電腦&lt;/strong&gt;
    用usb連到電腦上之後
    手錶還要往下滑一下找"Allow debugging?"的認證確認卡片
    Open on phone之後，手機上會出現一般的adb authorization畫面
    確認後才能連的上去&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;unlock device&lt;/strong&gt;
    手錶關機之後，長壓電源按鈕，會出現insert USB的畫面
    在按兩下會進入工程畫面，可以進fastboot, recovery之類的
    按一下按鈕switch, 按兩下確認
    進fastboot之後unlock:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;fastboot oem unlock
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;下載Wear-Supersu,zip 丟進sdcard裡面待用&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;刷TWRP recovery&lt;/strong&gt;
    下載修改過的TWRP recovery for smartwatch 3, 用fastboot刷進去
http://forum.xda-developers.com/smartwatch-3/development/recovery-twrp-2-8-3-0-sony-smartwatch-3-t2986907&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;fastboot flash recovery 
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;刷進去之後
想辦法先關機，之後進fastboot再轉recovery mode
如果用fastboot continue會reboot的話，就要再重刷一次recovery
因為他boot進系統之後會回復recovery, TWRP會不見 : P

成功在剛刷完TWRP就進recovery之後
就可以將先放到sdcard裡面的.zip檔刷進去啦~
&lt;/pre&gt;&lt;/div&gt;</content></entry><entry><title>Hello World</title><link href="/hello-world.html" rel="alternate"></link><published>2015-07-21T07:30:00+08:00</published><updated>2015-07-21T07:30:00+08:00</updated><author><name>Solring Lin</name></author><id>tag:None,2015-07-21:/hello-world.html</id><summary type="html">&lt;p&gt;(archive) Hello World&lt;/p&gt;</summary><content type="html">&lt;p&gt;Hi, This a demo post of &lt;a href="http://logdown.com"&gt;Logdown&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Logdown use Markdown as main syntax, you can find more example by reading this &lt;a href="http://en.wikipedia.org/wiki/Markdown"&gt;document on Wikipedia&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Logdown also support drag &amp;amp; drop image uploading. The picture syntax is like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://logdown.com/images/logo.png"&gt;&lt;/p&gt;
&lt;h2&gt;Bloging with code snippet:&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;inline code&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Plain Code&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;puts &amp;quot;Hello World!&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Code with Language&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hello World!&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Code with Title&lt;/h3&gt;
&lt;p&gt;```ruby hello_world.rb
puts "Hello World!"&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;## MathJax Example

### Mathjax

```mathjax
x = \dfrac{-b \pm \sqrt{b^2 - 4ac}}{2a}
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Inline Mathjax&lt;/h3&gt;
&lt;p&gt;The answser is &lt;code&gt;$a^2 + b^2 = c^2$&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Table Example&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Tables&lt;/th&gt;
&lt;th align="center"&gt;Are&lt;/th&gt;
&lt;th align="right"&gt;Cool&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;col 1&lt;/td&gt;
&lt;td align="center"&gt;Hello&lt;/td&gt;
&lt;td align="right"&gt;$1600&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;col 2&lt;/td&gt;
&lt;td align="center"&gt;Hello&lt;/td&gt;
&lt;td align="right"&gt;$12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;col 3&lt;/td&gt;
&lt;td align="center"&gt;Hello&lt;/td&gt;
&lt;td align="right"&gt;$1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content></entry></feed>